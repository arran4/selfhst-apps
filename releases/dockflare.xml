<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://selfh.st/apps</id>
  <title>DockFlare Releases</title>
  <updated>2025-05-22T09:36:36.242210-04:00</updated>
  <author>
    <name>selfh.st</name>
    <email>contact@selfh.st</email>
  </author>
  <link href="https://selfh.st/apps" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <subtitle>Self-hosted software releases generated by selfh.st</subtitle>
  <entry>
    <id>https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.2</id>
    <title>New release for DockFlare: Support for multi-domain configuration using indexed labels in DockFlare</title>
    <updated>2025-04-22T03:50:49-04:00</updated>
    <author>
      <name>ChrispyBacon-dev/DockFlare</name>
    </author>
    <content>&lt;p&gt;Introduce support for multi-domain configuration using indexed labels in DockFlare, allowing multiple domains to be managed for a single container. Enhance the reconciliation process with performance optimizations, including batch processing and real-time status updates in the UI.&lt;/p&gt;</content>
    <link href="https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.2" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/1.3</id>
    <title>New release for DockFlare: Dockflare Frontend Update &amp; Application Logo</title>
    <updated>2025-04-22T10:22:06-04:00</updated>
    <author>
      <name>ChrispyBacon-dev/DockFlare</name>
    </author>
    <content>&lt;h1&gt;Release Notes - Dockflare Frontend Update&lt;/h1&gt;
&lt;p&gt;This update incorporates several fixes and improvements to the Dockflare status page frontend, enhancing user experience, stability, and visual consistency.&lt;/p&gt;
&lt;h2&gt;Key Highlights&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dark/Light Theme Fix:&lt;/strong&gt; Resolved issues with theme switching and persistence. The page now reliably initializes to the user's preferred theme (saved or system default) and toggles correctly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Protocol Handling:&lt;/strong&gt; Improved handling of HTTP/HTTPS protocols for forms and internal links to prevent mixed-content issues and ensure correct form submissions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enhanced Stability:&lt;/strong&gt; Implemented stricter checks and better error handling in various parts of the frontend logic.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Branding Update:&lt;/strong&gt; Introduced the official application logo and banner in the page header.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation:&lt;/strong&gt; Added a project Wiki on GitHub for extended documentation and guides.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Bug Fixes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Theme:&lt;/strong&gt; Fixed inconsistencies in dark/light theme application and toggling. Explicitly configured Tailwind for class-based dark mode.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Agent Control:&lt;/strong&gt; Prevented the "Start Agent" button from being enabled prematurely when the necessary tunnel ID or token was not yet available.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API Status:&lt;/strong&gt; Corrected the logic for the API Status indicator (Tunnel Setup section) to more accurately reflect a fully configured state (requiring both ID and Token for internal tunnels, or ID for external).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Protocol Consistency:&lt;/strong&gt; Ensured forms and internal links consistently use the correct HTTP/HTTPS protocol matching the current page access.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Agent Status Display:&lt;/strong&gt; Improved robustness of agent status display to handle unknown or unavailable states gracefully.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Improvements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;UI:&lt;/strong&gt; Updated the header to use the Dockflare application logo and banner for improved branding and visual identity.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UI:&lt;/strong&gt; Added a visual "wildcard" badge next to wildcard hostnames in the Managed Ingress Rules table for better clarity.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UI:&lt;/strong&gt; Tunnel Token row is now hidden in the Tunnel Details section when using an external cloudflared agent, as it's not relevant in that mode.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Code Quality:&lt;/strong&gt; Significantly refactored frontend JavaScript for improved readability, maintainability, and potentially better performance. Enhanced error handling in log streaming and server ping checks.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The Initialization and Reconciliation status indicators, previously removed in an earlier iteration of the unstable branch, have been retained from the stable version.&lt;/li&gt;
&lt;li&gt;The clickable links for hostnames in the Managed Ingress Rules table continue to use &lt;code&gt;https://&lt;/code&gt; for consistency and security.&lt;/li&gt;
&lt;/ul&gt;</content>
    <link href="https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/1.3" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.4</id>
    <title>New release for DockFlare: Centralized Cloudflare Tunnel Visibility &amp; DNS Inspection Across Multiple Hosts</title>
    <updated>2025-05-10T16:16:40-04:00</updated>
    <author>
      <name>ChrispyBacon-dev/DockFlare</name>
    </author>
    <content>&lt;p&gt;&lt;strong&gt;Feature Spotlight: Centralized Cloudflare Tunnel Visibility &amp;amp; DNS Inspection Across Multiple Hosts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This release introduces a significant enhancement to DockFlare's monitoring capabilities, especially for users running DockFlare instances across multiple Docker hosts. It provides a much-needed holistic view of your entire Cloudflare Tunnel infrastructure.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Challenge Addressed:&lt;/strong&gt;
Previously, if you were running DockFlare on several hosts, each managing its own tunnel, getting a complete overview required checking each DockFlare instance individually. This new feature consolidates that view.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Account-Wide Tunnel Listing:&lt;/strong&gt;
   - The main status page now includes a new section titled "All Cloudflare Tunnels on Account."
   - Instead of just seeing the tunnel managed by the local DockFlare, this table displays &lt;strong&gt;all&lt;/strong&gt; Cloudflare Tunnels found under the Cloudflare Account ID specified by your &lt;code&gt;CF_ACCOUNT_ID&lt;/code&gt; environment variable.
   - It provides a quick overview of each tunnel's name, ID, current status (e.g., healthy, degraded, down, inactive), creation date, and active &lt;code&gt;cloudflared&lt;/code&gt; connections (including colo names).
   - This is invaluable for users with multiple DockFlare deployments (e.g., 5-6 Docker hosts or more), as it offers a single pane of glass to monitor all tunnels associated with the account, regardless of which host they originate from.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Integrated DNS Record Viewer (from any DockFlare instance):&lt;/strong&gt;
   - Alongside each tunnel listed in the new "All Cloudflare Tunnels on Account" table, you'll find a &lt;code&gt;+&lt;/code&gt; icon.
   - Clicking this icon will dynamically fetch and display all CNAME DNS records that point to that specific tunnel's unique &lt;code&gt;cfargotunnel.com&lt;/code&gt; address, &lt;strong&gt;no matter which DockFlare instance is displaying the page.&lt;/strong&gt;
   - The displayed DNS records are clickable links, allowing for easy navigation to the actual hostnames.
   - This allows for quick verification from any of your DockFlare UIs which hostnames are currently routed through any given tunnel on your account.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Benefits:&lt;/strong&gt;
*   &lt;strong&gt;True Centralized Overview:&lt;/strong&gt; See all your account's tunnels and their DNS linkages from any single DockFlare instance, perfect for multi-host setups.
*   &lt;strong&gt;Simplified DNS Auditing:&lt;/strong&gt; Quickly identify which DNS hostnames are associated with which tunnel across your entire account.
*   &lt;strong&gt;Streamlined Troubleshooting:&lt;/strong&gt; More easily spot misconfigurations or understand traffic flow when dealing with multiple tunnels and hosts.
*   &lt;strong&gt;Reduced Context Switching:&lt;/strong&gt; No need to log into or expose multiple DockFlare instances just to check on different tunnels.&lt;/p&gt;
&lt;p&gt;I believe these additions will make managing and understanding your Cloudflare Tunnel setup with DockFlare, especially in distributed environments, significantly more powerful and intuitive!&lt;/p&gt;</content>
    <link href="https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.4" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.6</id>
    <title>New release for DockFlare: DockFlare v1.6 - UI Power-Up &amp; Styling Overhaul! 🎉</title>
    <updated>2025-05-15T17:31:02-04:00</updated>
    <author>
      <name>ChrispyBacon-dev/DockFlare</name>
    </author>
    <content>&lt;h2&gt;DockFlare v1.6 - UI Power-Up &amp;amp; Styling Overhaul! 🎉&lt;/h2&gt;
&lt;p&gt;This release marks a significant step forward for DockFlare, introducing highly-requested &lt;strong&gt;UI-driven management for Cloudflare Access Policies&lt;/strong&gt; and a &lt;strong&gt;major visual refresh with DaisyUI&lt;/strong&gt; for a more modern and consistent user experience!&lt;/p&gt;
&lt;p&gt;Managing access to your services is now more flexible than ever. While Docker labels remain perfect for defining the initial state of your services and their Access Policies, you can now dynamically adjust these policies directly from the DockFlare Web UI. These UI changes are &lt;strong&gt;persistent&lt;/strong&gt;, overriding container labels and surviving restarts of both DockFlare and your application containers. Worried about losing your label-defined setup? A new "Revert to Labels" option ensures you can always go back to your declarative configuration.&lt;/p&gt;
&lt;h3&gt;✨ Highlights&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;🚀 UI-Driven Access Policy Management:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Override Labels:&lt;/strong&gt; Directly edit Access Policies (None, Bypass, Authenticate by Email, Default TLD) for any managed service via the new "Manage Policy" dropdown in the Web UI.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Persistent Changes:&lt;/strong&gt; UI-set Access Policies are saved in &lt;code&gt;state.json&lt;/code&gt; and take precedence over container labels, even after restarts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;"Revert to Labels" Button:&lt;/strong&gt; Easily switch a service's Access Policy back to be controlled by its Docker labels.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;"UI Override" Badge:&lt;/strong&gt; Clearly indicates in the UI when an Access Policy is managed by the UI.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;💅 Major UI Refresh with DaisyUI:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;The entire Web UI has been restyled using DaisyUI components, providing a cleaner, more modern, and themeable interface.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Theme Selector:&lt;/strong&gt; Choose from a wide variety of pre-built DaisyUI themes (light, dark, cupcake, synthwave, and many more!) to personalize your DockFlare dashboard. Your preference is saved locally.&lt;/li&gt;
&lt;li&gt;Improved consistency for buttons, alerts, badges, tables, and forms.&lt;/li&gt;
&lt;li&gt;Enhanced readability and usability across the dashboard.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improved Table Layout:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;The "Managed Ingress Rules" table columns have been reordered for better workflow: Status, Hostname, Service Target, Container, Access Policy, Manage Policy, Expires At (UTC), Actions.&lt;/li&gt;
&lt;li&gt;Dropdowns in the table now attempt to position themselves intelligently to avoid being clipped.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Under-the-Hood Refinements:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Refactored core logic for handling Access Policies to support the new UI override system.&lt;/li&gt;
&lt;li&gt;Ensured &lt;code&gt;process_container_start&lt;/code&gt; and the reconciliation loop (&lt;code&gt;_run_reconciliation&lt;/code&gt;) correctly respect the &lt;code&gt;access_policy_ui_override&lt;/code&gt; flag.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;🔧 Key Changes &amp;amp; Fixes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Feature:&lt;/strong&gt; Implemented state persistence for UI-overridden Access Policies (&lt;code&gt;access_policy_ui_override&lt;/code&gt; flag in &lt;code&gt;state.json&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Feature:&lt;/strong&gt; Added new Flask route (&lt;code&gt;/revert_access_policy_to_labels&lt;/code&gt;) and backend logic for reverting UI policies to label-defined configurations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UI:&lt;/strong&gt; Replaced custom policy edit popup with a DaisyUI dropdown component, improving usability and solving previous overflow issues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UI:&lt;/strong&gt; Integrated DaisyUI for most UI elements including cards, buttons, alerts, badges, tables, and form inputs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UI:&lt;/strong&gt; Added a multi-theme selector.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UI:&lt;/strong&gt; Reordered columns in the "Managed Ingress Rules" table for better information flow.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UI:&lt;/strong&gt; Improved display for "Pending Label Sync" status.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Build:&lt;/strong&gt; Migrated to a multi-stage Docker build process to compile Tailwind CSS and DaisyUI styles.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fix:&lt;/strong&gt; Addressed various minor display and styling inconsistencies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docs:&lt;/strong&gt; README and Wiki updated&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;⚙️ For Users Updating&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Your existing &lt;code&gt;state.json&lt;/code&gt; file will be automatically updated to include the new &lt;code&gt;access_policy_ui_override&lt;/code&gt; field (defaulting to &lt;code&gt;false&lt;/code&gt; for existing rules not yet touched by the new UI).&lt;/li&gt;
&lt;li&gt;After updating, if you wish to manage an Access Policy via the UI, simply edit it using the new "Manage Policy" dropdown. This will automatically set the UI override.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;🙏 Thanks&lt;/h3&gt;
&lt;p&gt;Thank you for using DockFlare! I hope these new features improve your experience.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Docker Image:&lt;/strong&gt; &lt;code&gt;alplat/dockflare:stable&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;I'm excited for you to try out these new capabilities! As always, please report any issues or provide feedback on GitHub.&lt;/p&gt;</content>
    <link href="https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.6" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.7</id>
    <title>New release for DockFlare: DockFlare v1.7 Release Notes - Unified Ingress &amp; Manual Rules!</title>
    <updated>2025-05-17T05:51:30-04:00</updated>
    <author>
      <name>ChrispyBacon-dev/DockFlare</name>
    </author>
    <content>&lt;h2&gt;DockFlare v1.7 Release Notes - Unified Ingress &amp;amp; Manual Rules!&lt;/h2&gt;
&lt;p&gt;I'm excited to announce the release of DockFlare v1.7, a significant update focused on expanding management capabilities and refining the user experience! This version introduces the highly requested &lt;strong&gt;Manual Ingress Rule Management&lt;/strong&gt;, allowing you to bring non-Dockerized internal services under the umbrella of your Cloudflare Tunnel with the same ease as your containerized applications.&lt;/p&gt;
&lt;h3&gt;✨ New Features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Manual Ingress Rule Management via UI:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Unified View:&lt;/strong&gt; All managed public hostnames (both Docker-derived and manually added) are now displayed in a single, streamlined "Managed Ingress Rules" table in the Web UI.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Add Non-Docker Services:&lt;/strong&gt; A new "Add Manual Rule" button and modal allow you to easily define public hostnames for services not running in Docker (e.g., your router admin page, Proxmox, NAS UI, internal wikis).&lt;ul&gt;
&lt;li&gt;Specify hostname, target service URL (e.g., &lt;code&gt;http://192.168.0.1:80&lt;/code&gt;, &lt;code&gt;https://internal-server:8443&lt;/code&gt;), an optional Cloudflare Zone Name (if different from the global &lt;code&gt;CF_ZONE_ID&lt;/code&gt;), and TLS verification settings.&lt;/li&gt;
&lt;li&gt;DockFlare automatically handles the creation/deletion of the corresponding Cloudflare Tunnel ingress rule and DNS CNAME record.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Path Stripping for Services:&lt;/strong&gt; When adding manual rules, any path included in the service URL (e.g., &lt;code&gt;https://my-service/app/&lt;/code&gt;) will be automatically stripped (to &lt;code&gt;https://my-service&lt;/code&gt;) for the Cloudflare Tunnel configuration, as Cloudflare expects only the scheme, host, and port. The original path from the user's request will still be passed to your origin service.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Refined Access Policy Management:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Access Policies can now be managed via the UI for &lt;strong&gt;both&lt;/strong&gt; Docker-derived rules and the new Manual Rules, offering the same options (Bypass, Authenticate by Email, Default TLD, etc.).&lt;/li&gt;
&lt;li&gt;The "Revert" button for UI-set policies on manual rules now clearly indicates it will remove the specific UI policy, making the rule public or subject to a TLD policy.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;🎨 UI/UX Enhancements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Improved Badge Readability:&lt;/strong&gt; Status badges ("active", "pending deletion", "Manual", "UI Override") in the "Managed Ingress Rules" table are now solid colors (instead of outlines) for much better contrast and readability across all themes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consistent Pulsating Animations (Optional &amp;amp; Configurable):&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;The "Agent Status: running" badge continues to pulsate.&lt;/li&gt;
&lt;li&gt;The "UI Override" badge now pulsates to draw attention to configurations deviating from label/default settings.&lt;/li&gt;
&lt;li&gt;The "active" rule status badges are now static solid colors by default for less visual noise.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Localized Time Display:&lt;/strong&gt; The "Expires At" column for pending deletions now displays the timestamp in the user's &lt;strong&gt;local browser timezone&lt;/strong&gt; instead of UTC, making it much more intuitive.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clearer Rule Identification:&lt;/strong&gt; The "Identifier" column now explicitly shows "Manual Rule" for manually added entries, distinguishing them from container IDs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;🐛 Bug Fixes &amp;amp; Internal Improvements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Corrected Ingress Rule Deletion:&lt;/strong&gt; Resolved a critical bug where deleting a manual rule (and previously, sometimes expired Docker rules) would remove the DNS record and Access Application, but the ingress rule would persist in the Cloudflare Tunnel configuration. The &lt;code&gt;update_cloudflare_config&lt;/code&gt; logic is now more assertive, ensuring that rules removed from DockFlare's management are also properly removed from the Cloudflare Tunnel.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Robust State Handling:&lt;/strong&gt; The internal &lt;code&gt;source&lt;/code&gt; field for rules (&lt;code&gt;docker&lt;/code&gt; or &lt;code&gt;manual&lt;/code&gt;) is now more consistently managed throughout the application lifecycle (loading, processing, saving state), ensuring accurate differentiation and behavior in reconciliation and cleanup.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Jinja Template Rendering:&lt;/strong&gt; Addressed several Jinja2 template syntax and logic errors encountered during development, ensuring smoother page rendering.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JavaScript Stability:&lt;/strong&gt; Improved the JavaScript for handling dynamic elements and event listeners related to policy editing, resolving console errors.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PEP 8 Imports:&lt;/strong&gt; Standardized Python import order for better code readability and maintainability.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;🔧 For Developers &amp;amp; Advanced Users&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;update_cloudflare_config&lt;/code&gt; function now takes a more authoritative stance: for the DockFlare-managed tunnel, any non-wildcard, non-catch-all ingress rule found on Cloudflare that is &lt;em&gt;not&lt;/em&gt; present in DockFlare's &lt;code&gt;managed_rules&lt;/code&gt; (either from Docker labels or manual UI entries) will be removed by DockFlare. This ensures the tunnel configuration accurately reflects DockFlare's intended state. True external wildcards and the API's catch-all rule are still preserved.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;⬆️ Upgrading to v1.7&lt;/h3&gt;
&lt;p&gt;Due to significant improvements in state management and the introduction of the &lt;code&gt;source&lt;/code&gt; field for rules, a &lt;strong&gt;completely clean state (both on Cloudflare and locally) is strongly recommended&lt;/strong&gt; for the smoothest upgrade. This ensures all new logic operates from a pristine baseline and avoids potential conflicts. This is especially true if you are coming from a version prior to v1.7 or have experienced any inconsistencies.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recommended Upgrade Path for a True Fresh Start:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Clean Up Existing Cloudflare Configuration:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Log in to your Cloudflare Dashboard: &lt;a href="https://one.dash.cloudflare.com/"&gt;https://one.dash.cloudflare.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Navigate to &lt;strong&gt;Zero Trust&lt;/strong&gt; from the sidebar.&lt;/li&gt;
&lt;li&gt;In the Zero Trust dashboard, go to &lt;strong&gt;Access -&amp;gt; Tunnels&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Locate the tunnel previously managed by DockFlare (identified by your &lt;code&gt;TUNNEL_NAME&lt;/code&gt; environment variable, e.g., "dockflared-tunnel" or your custom name).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Delete this tunnel.&lt;/strong&gt; This will remove its configuration and associated ingress rules on Cloudflare.&lt;/li&gt;
&lt;li&gt;Next, navigate to your DNS zone within the main Cloudflare Dashboard (usually by clicking your domain under "Websites"). Review and &lt;strong&gt;delete any old CNAME records&lt;/strong&gt; that were pointing to the now-deleted tunnel's &lt;code&gt;.cfargotunnel.com&lt;/code&gt; address. DockFlare v1.7 will recreate these as needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Stop and Remove your Local DockFlare Instance:&lt;/strong&gt;
    &lt;em&gt;(If using Docker Compose, navigate to the directory containing your &lt;code&gt;docker-compose.yml&lt;/code&gt; file)&lt;/em&gt;
    &lt;code&gt;bash
    docker compose down&lt;/code&gt;
    &lt;em&gt;(For older &lt;code&gt;docker-compose&lt;/code&gt; v1, use &lt;code&gt;docker-compose down&lt;/code&gt;)&lt;/em&gt;
    &lt;em&gt;(If using &lt;code&gt;docker run&lt;/code&gt;, use &lt;code&gt;docker stop your_dockflare_container_name &amp;amp;&amp;amp; docker rm your_dockflare_container_name&lt;/code&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Important: Back up Local State (Optional - for reference only):&lt;/strong&gt;
    If you wish to keep a reference of your old &lt;code&gt;state.json&lt;/code&gt; (e.g., to remember manual rules you'll need to re-add), you can back it up now. This old state file will &lt;strong&gt;not&lt;/strong&gt; be reused for the clean upgrade.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Named Volume (e.g., &lt;code&gt;dockflare_data&lt;/code&gt;):&lt;/strong&gt; Note the content of &lt;code&gt;/app/data/state.json&lt;/code&gt; within the volume if needed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bind Mount:&lt;/strong&gt; Note the content of &lt;code&gt;./dockflare-data/state.json&lt;/code&gt; on your host if needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pull the Latest DockFlare Image:&lt;/strong&gt;
    &lt;code&gt;bash
    docker pull alplat/dockflare:stable&lt;/code&gt;
    &lt;em&gt;(You can also optionally remove the old image first with &lt;code&gt;docker rmi alplat/dockflare:stable&lt;/code&gt; to ensure a completely fresh image pull.)&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Purge the Local Docker Volume / Clear Bind Mount (CRITICAL for Clean Start):&lt;/strong&gt;
    This step removes your old &lt;code&gt;state.json&lt;/code&gt;, ensuring DockFlare v1.7 starts without any previous local state.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Named Volume (if named &lt;code&gt;dockflare_data&lt;/code&gt; as per example &lt;code&gt;docker-compose.yml&lt;/code&gt;):&lt;/strong&gt;
    &lt;code&gt;bash
    docker volume rm dockflare_data&lt;/code&gt;
    &lt;em&gt;Note: If your &lt;code&gt;docker-compose.yml&lt;/code&gt; is part of a project, Docker Compose might have prefixed the volume name (e.g., &lt;code&gt;myproject_dockflare_data&lt;/code&gt;). Use &lt;code&gt;docker volume ls&lt;/code&gt; to verify the exact name if the command above fails, and then use that exact name in the &lt;code&gt;rm&lt;/code&gt; command.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bind Mount:&lt;/strong&gt; If you used a bind mount (e.g., &lt;code&gt;./dockflare-data:/app/data&lt;/code&gt;), delete the &lt;code&gt;state.json&lt;/code&gt; file from your host directory (e.g., &lt;code&gt;rm ./dockflare-data/state.json&lt;/code&gt;) or delete the entire host directory if it solely contains DockFlare data.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Start DockFlare with the New Image and Clean State:&lt;/strong&gt;
    &lt;em&gt;(If using Docker Compose)&lt;/em&gt;
    &lt;code&gt;bash
    docker compose up -d&lt;/code&gt;
    &lt;em&gt;(Or re-run your &lt;code&gt;docker run ...&lt;/code&gt; command if not using Compose, ensuring your volume/bind mount for &lt;code&gt;/app/data&lt;/code&gt; is correctly specified – it will be created fresh if it was a named volume that you removed).&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DockFlare will start with an empty local state.&lt;/li&gt;
&lt;li&gt;It will create a new tunnel on Cloudflare (using your &lt;code&gt;TUNNEL_NAME&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;It will perform its initial scan for Docker containers with labels, populating its rules and creating new ingress rules and DNS records.&lt;/li&gt;
&lt;li&gt;You will need to re-add any services you wish to manage as "Manual Rules" via the new UI feature.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Why a completely clean state (Cloudflare &amp;amp; local) is recommended for v1.7:&lt;/strong&gt;
The introduction of the &lt;code&gt;source&lt;/code&gt; field ("docker" vs. "manual") and the refined &lt;code&gt;update_cloudflare_config&lt;/code&gt; logic represent fundamental changes. Starting fresh ensures the integrity of the new rule management system, avoids potential conflicts from older state files or lingering Cloudflare configurations, and allows the application to establish itself as the authority for its managed tunnel from a known, clean baseline.&lt;/p&gt;</content>
    <link href="https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.7" rel="alternate"/>
  </entry>
</feed>
