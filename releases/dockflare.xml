<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://selfh.st/apps</id>
  <title>DockFlare Releases</title>
  <updated>2025-06-03T01:36:24.242251-04:00</updated>
  <author>
    <name>selfh.st</name>
    <email>contact@selfh.st</email>
  </author>
  <link href="https://selfh.st/apps" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <subtitle>Self-hosted software releases generated by selfh.st</subtitle>
  <entry>
    <id>https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.7</id>
    <title>New release for DockFlare: DockFlare v1.7 Release Notes - Unified Ingress &amp; Manual Rules!</title>
    <updated>2025-05-17T05:51:30-04:00</updated>
    <author>
      <name>ChrispyBacon-dev/DockFlare</name>
    </author>
    <content>&lt;h2&gt;DockFlare v1.7 Release Notes - Unified Ingress &amp;amp; Manual Rules!&lt;/h2&gt;
&lt;p&gt;I'm excited to announce the release of DockFlare v1.7, a significant update focused on expanding management capabilities and refining the user experience! This version introduces the highly requested &lt;strong&gt;Manual Ingress Rule Management&lt;/strong&gt;, allowing you to bring non-Dockerized internal services under the umbrella of your Cloudflare Tunnel with the same ease as your containerized applications.&lt;/p&gt;
&lt;h3&gt;‚ú® New Features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Manual Ingress Rule Management via UI:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Unified View:&lt;/strong&gt; All managed public hostnames (both Docker-derived and manually added) are now displayed in a single, streamlined "Managed Ingress Rules" table in the Web UI.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Add Non-Docker Services:&lt;/strong&gt; A new "Add Manual Rule" button and modal allow you to easily define public hostnames for services not running in Docker (e.g., your router admin page, Proxmox, NAS UI, internal wikis).&lt;ul&gt;
&lt;li&gt;Specify hostname, target service URL (e.g., &lt;code&gt;http://192.168.0.1:80&lt;/code&gt;, &lt;code&gt;https://internal-server:8443&lt;/code&gt;), an optional Cloudflare Zone Name (if different from the global &lt;code&gt;CF_ZONE_ID&lt;/code&gt;), and TLS verification settings.&lt;/li&gt;
&lt;li&gt;DockFlare automatically handles the creation/deletion of the corresponding Cloudflare Tunnel ingress rule and DNS CNAME record.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Path Stripping for Services:&lt;/strong&gt; When adding manual rules, any path included in the service URL (e.g., &lt;code&gt;https://my-service/app/&lt;/code&gt;) will be automatically stripped (to &lt;code&gt;https://my-service&lt;/code&gt;) for the Cloudflare Tunnel configuration, as Cloudflare expects only the scheme, host, and port. The original path from the user's request will still be passed to your origin service.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Refined Access Policy Management:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Access Policies can now be managed via the UI for &lt;strong&gt;both&lt;/strong&gt; Docker-derived rules and the new Manual Rules, offering the same options (Bypass, Authenticate by Email, Default TLD, etc.).&lt;/li&gt;
&lt;li&gt;The "Revert" button for UI-set policies on manual rules now clearly indicates it will remove the specific UI policy, making the rule public or subject to a TLD policy.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;üé® UI/UX Enhancements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Improved Badge Readability:&lt;/strong&gt; Status badges ("active", "pending deletion", "Manual", "UI Override") in the "Managed Ingress Rules" table are now solid colors (instead of outlines) for much better contrast and readability across all themes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consistent Pulsating Animations (Optional &amp;amp; Configurable):&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;The "Agent Status: running" badge continues to pulsate.&lt;/li&gt;
&lt;li&gt;The "UI Override" badge now pulsates to draw attention to configurations deviating from label/default settings.&lt;/li&gt;
&lt;li&gt;The "active" rule status badges are now static solid colors by default for less visual noise.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Localized Time Display:&lt;/strong&gt; The "Expires At" column for pending deletions now displays the timestamp in the user's &lt;strong&gt;local browser timezone&lt;/strong&gt; instead of UTC, making it much more intuitive.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clearer Rule Identification:&lt;/strong&gt; The "Identifier" column now explicitly shows "Manual Rule" for manually added entries, distinguishing them from container IDs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;üêõ Bug Fixes &amp;amp; Internal Improvements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Corrected Ingress Rule Deletion:&lt;/strong&gt; Resolved a critical bug where deleting a manual rule (and previously, sometimes expired Docker rules) would remove the DNS record and Access Application, but the ingress rule would persist in the Cloudflare Tunnel configuration. The &lt;code&gt;update_cloudflare_config&lt;/code&gt; logic is now more assertive, ensuring that rules removed from DockFlare's management are also properly removed from the Cloudflare Tunnel.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Robust State Handling:&lt;/strong&gt; The internal &lt;code&gt;source&lt;/code&gt; field for rules (&lt;code&gt;docker&lt;/code&gt; or &lt;code&gt;manual&lt;/code&gt;) is now more consistently managed throughout the application lifecycle (loading, processing, saving state), ensuring accurate differentiation and behavior in reconciliation and cleanup.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Jinja Template Rendering:&lt;/strong&gt; Addressed several Jinja2 template syntax and logic errors encountered during development, ensuring smoother page rendering.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JavaScript Stability:&lt;/strong&gt; Improved the JavaScript for handling dynamic elements and event listeners related to policy editing, resolving console errors.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PEP 8 Imports:&lt;/strong&gt; Standardized Python import order for better code readability and maintainability.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;üîß For Developers &amp;amp; Advanced Users&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;update_cloudflare_config&lt;/code&gt; function now takes a more authoritative stance: for the DockFlare-managed tunnel, any non-wildcard, non-catch-all ingress rule found on Cloudflare that is &lt;em&gt;not&lt;/em&gt; present in DockFlare's &lt;code&gt;managed_rules&lt;/code&gt; (either from Docker labels or manual UI entries) will be removed by DockFlare. This ensures the tunnel configuration accurately reflects DockFlare's intended state. True external wildcards and the API's catch-all rule are still preserved.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;‚¨ÜÔ∏è Upgrading to v1.7&lt;/h3&gt;
&lt;p&gt;Due to significant improvements in state management and the introduction of the &lt;code&gt;source&lt;/code&gt; field for rules, a &lt;strong&gt;completely clean state (both on Cloudflare and locally) is strongly recommended&lt;/strong&gt; for the smoothest upgrade. This ensures all new logic operates from a pristine baseline and avoids potential conflicts. This is especially true if you are coming from a version prior to v1.7 or have experienced any inconsistencies.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recommended Upgrade Path for a True Fresh Start:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Clean Up Existing Cloudflare Configuration:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Log in to your Cloudflare Dashboard: &lt;a href="https://one.dash.cloudflare.com/"&gt;https://one.dash.cloudflare.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Navigate to &lt;strong&gt;Zero Trust&lt;/strong&gt; from the sidebar.&lt;/li&gt;
&lt;li&gt;In the Zero Trust dashboard, go to &lt;strong&gt;Access -&amp;gt; Tunnels&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Locate the tunnel previously managed by DockFlare (identified by your &lt;code&gt;TUNNEL_NAME&lt;/code&gt; environment variable, e.g., "dockflared-tunnel" or your custom name).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Delete this tunnel.&lt;/strong&gt; This will remove its configuration and associated ingress rules on Cloudflare.&lt;/li&gt;
&lt;li&gt;Next, navigate to your DNS zone within the main Cloudflare Dashboard (usually by clicking your domain under "Websites"). Review and &lt;strong&gt;delete any old CNAME records&lt;/strong&gt; that were pointing to the now-deleted tunnel's &lt;code&gt;.cfargotunnel.com&lt;/code&gt; address. DockFlare v1.7 will recreate these as needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Stop and Remove your Local DockFlare Instance:&lt;/strong&gt;
    &lt;em&gt;(If using Docker Compose, navigate to the directory containing your &lt;code&gt;docker-compose.yml&lt;/code&gt; file)&lt;/em&gt;
    &lt;code&gt;bash
    docker compose down&lt;/code&gt;
    &lt;em&gt;(For older &lt;code&gt;docker-compose&lt;/code&gt; v1, use &lt;code&gt;docker-compose down&lt;/code&gt;)&lt;/em&gt;
    &lt;em&gt;(If using &lt;code&gt;docker run&lt;/code&gt;, use &lt;code&gt;docker stop your_dockflare_container_name &amp;amp;&amp;amp; docker rm your_dockflare_container_name&lt;/code&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Important: Back up Local State (Optional - for reference only):&lt;/strong&gt;
    If you wish to keep a reference of your old &lt;code&gt;state.json&lt;/code&gt; (e.g., to remember manual rules you'll need to re-add), you can back it up now. This old state file will &lt;strong&gt;not&lt;/strong&gt; be reused for the clean upgrade.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Named Volume (e.g., &lt;code&gt;dockflare_data&lt;/code&gt;):&lt;/strong&gt; Note the content of &lt;code&gt;/app/data/state.json&lt;/code&gt; within the volume if needed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bind Mount:&lt;/strong&gt; Note the content of &lt;code&gt;./dockflare-data/state.json&lt;/code&gt; on your host if needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pull the Latest DockFlare Image:&lt;/strong&gt;
    &lt;code&gt;bash
    docker pull alplat/dockflare:stable&lt;/code&gt;
    &lt;em&gt;(You can also optionally remove the old image first with &lt;code&gt;docker rmi alplat/dockflare:stable&lt;/code&gt; to ensure a completely fresh image pull.)&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Purge the Local Docker Volume / Clear Bind Mount (CRITICAL for Clean Start):&lt;/strong&gt;
    This step removes your old &lt;code&gt;state.json&lt;/code&gt;, ensuring DockFlare v1.7 starts without any previous local state.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Named Volume (if named &lt;code&gt;dockflare_data&lt;/code&gt; as per example &lt;code&gt;docker-compose.yml&lt;/code&gt;):&lt;/strong&gt;
    &lt;code&gt;bash
    docker volume rm dockflare_data&lt;/code&gt;
    &lt;em&gt;Note: If your &lt;code&gt;docker-compose.yml&lt;/code&gt; is part of a project, Docker Compose might have prefixed the volume name (e.g., &lt;code&gt;myproject_dockflare_data&lt;/code&gt;). Use &lt;code&gt;docker volume ls&lt;/code&gt; to verify the exact name if the command above fails, and then use that exact name in the &lt;code&gt;rm&lt;/code&gt; command.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bind Mount:&lt;/strong&gt; If you used a bind mount (e.g., &lt;code&gt;./dockflare-data:/app/data&lt;/code&gt;), delete the &lt;code&gt;state.json&lt;/code&gt; file from your host directory (e.g., &lt;code&gt;rm ./dockflare-data/state.json&lt;/code&gt;) or delete the entire host directory if it solely contains DockFlare data.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Start DockFlare with the New Image and Clean State:&lt;/strong&gt;
    &lt;em&gt;(If using Docker Compose)&lt;/em&gt;
    &lt;code&gt;bash
    docker compose up -d&lt;/code&gt;
    &lt;em&gt;(Or re-run your &lt;code&gt;docker run ...&lt;/code&gt; command if not using Compose, ensuring your volume/bind mount for &lt;code&gt;/app/data&lt;/code&gt; is correctly specified ‚Äì it will be created fresh if it was a named volume that you removed).&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DockFlare will start with an empty local state.&lt;/li&gt;
&lt;li&gt;It will create a new tunnel on Cloudflare (using your &lt;code&gt;TUNNEL_NAME&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;It will perform its initial scan for Docker containers with labels, populating its rules and creating new ingress rules and DNS records.&lt;/li&gt;
&lt;li&gt;You will need to re-add any services you wish to manage as "Manual Rules" via the new UI feature.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Why a completely clean state (Cloudflare &amp;amp; local) is recommended for v1.7:&lt;/strong&gt;
The introduction of the &lt;code&gt;source&lt;/code&gt; field ("docker" vs. "manual") and the refined &lt;code&gt;update_cloudflare_config&lt;/code&gt; logic represent fundamental changes. Starting fresh ensures the integrity of the new rule management system, avoids potential conflicts from older state files or lingering Cloudflare configurations, and allows the application to establish itself as the authority for its managed tunnel from a known, clean baseline.&lt;/p&gt;</content>
    <link href="https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.7" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.7.1</id>
    <title>New release for DockFlare: Bugfix DNS ZONE for all Tunnels</title>
    <updated>2025-05-22T16:03:29-04:00</updated>
    <author>
      <name>ChrispyBacon-dev/DockFlare</name>
    </author>
    <content>&lt;p&gt;&lt;strong&gt;Bug Fix &amp;amp; Configuration Update:&lt;/strong&gt;
*   Resolved an issue in the "All Cloudflare Tunnels on Account" UI view where DNS records for a tunnel were only displayed if they resided in the primary &lt;code&gt;CF_ZONE_ID&lt;/code&gt;. This view now correctly includes records from zones specified in the &lt;code&gt;TUNNEL_DNS_SCAN_ZONE_NAMES&lt;/code&gt; environment variable.
*   The &lt;code&gt;.env.example&lt;/code&gt; file has been updated to include the &lt;code&gt;TUNNEL_DNS_SCAN_ZONE_NAMES&lt;/code&gt; variable with a clear explanation for its usage. Please refer to it when configuring DockFlare for multi-zone DNS scanning in the UI.&lt;/p&gt;</content>
    <link href="https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.7.1" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.8.0</id>
    <title>New release for DockFlare: DockFlare v1.8.0 - Major Codebase Refactor!</title>
    <updated>2025-05-27T04:48:55-04:00</updated>
    <author>
      <name>ChrispyBacon-dev/DockFlare</name>
    </author>
    <content>&lt;h2&gt;DockFlare v1.8.0 - Major Codebase Refactor!&lt;/h2&gt;
&lt;p&gt;This release marks a significant internal overhaul of DockFlare's codebase, focused on enhancing modularity, maintainability, and future development. While the core functionality remains the same, the underlying structure has been substantially improved.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Key Changes &amp;amp; Improvements:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Major Codebase Refactoring:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The main &lt;code&gt;app.py&lt;/code&gt; has been deconstructed into a more organized, package-based structure:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;app/core/&lt;/code&gt;&lt;/strong&gt;: Contains distinct modules for core business logic:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;access_manager.py&lt;/code&gt;: Manages Cloudflare Access Application interactions.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cloudflare_api.py&lt;/code&gt;: Centralizes all direct Cloudflare API calls.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker_handler.py&lt;/code&gt;: Handles Docker event listening and container label processing.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reconciler.py&lt;/code&gt;: Implements state reconciliation and cleanup of expired rules.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;state_manager.py&lt;/code&gt;: Manages application state (&lt;code&gt;managed_rules&lt;/code&gt;) and persistence to &lt;code&gt;state.json&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tunnel_manager.py&lt;/code&gt;: Handles Cloudflare Tunnel initialization, configuration updates, and &lt;code&gt;cloudflared&lt;/code&gt; agent management.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;app/web/&lt;/code&gt;&lt;/strong&gt;: Contains Flask-specific components:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;routes.py&lt;/code&gt;: Defines all web UI routes using Flask Blueprints.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;app/config.py&lt;/code&gt;&lt;/strong&gt;: Centralizes all environment variable loading and application constants.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;app/__init__.py&lt;/code&gt;&lt;/strong&gt;: Initializes the Flask application, logging, and global components.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;app/main.py&lt;/code&gt;&lt;/strong&gt;: Serves as the main entry point for running the application.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;This modular structure improves separation of concerns, making the code easier to understand, debug, and extend.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Frontend JavaScript Externalized:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All inline JavaScript from &lt;code&gt;status_page.html&lt;/code&gt; has been moved to &lt;code&gt;app/static/js/main.js&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;status_page.html&lt;/code&gt; is now cleaner and primarily focused on HTML structure.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Build Process Refinements:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Dockerfile&lt;/code&gt; updated to correctly build the application with the new directory structure, including the multi-stage frontend asset build.&lt;/li&gt;
&lt;li&gt;Paths in &lt;code&gt;package.json&lt;/code&gt; (for &lt;code&gt;build:css&lt;/code&gt; script) and &lt;code&gt;tailwind.config.js&lt;/code&gt; (for &lt;code&gt;content&lt;/code&gt; scanning) updated to align with the new &lt;code&gt;app/&lt;/code&gt; subdirectory structure.&lt;/li&gt;
&lt;li&gt;GitHub Actions workflow (&lt;code&gt;docker-image.yml&lt;/code&gt;) adjusted for the new &lt;code&gt;Dockerfile&lt;/code&gt; location and build context.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bug Fixes &amp;amp; Stability Improvements (discovered and addressed during refactoring):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Resolved potential circular import issues related to the Flask &lt;code&gt;app&lt;/code&gt; instance.&lt;/li&gt;
&lt;li&gt;Addressed issues with &lt;code&gt;state.json&lt;/code&gt; not saving correctly due to Python's handling of module-level global variables during imports and re-initialization. The &lt;code&gt;load_state&lt;/code&gt; function now correctly mutates the shared &lt;code&gt;managed_rules&lt;/code&gt; dictionary.&lt;/li&gt;
&lt;li&gt;Fixed a deadlock scenario where &lt;code&gt;save_state&lt;/code&gt; could hang if called by a thread that already held the &lt;code&gt;state_lock&lt;/code&gt;, by changing &lt;code&gt;state_lock&lt;/code&gt; to a &lt;code&gt;threading.RLock()&lt;/code&gt; (Re-entrant Lock).&lt;/li&gt;
&lt;li&gt;Corrected &lt;code&gt;NameError&lt;/code&gt; exceptions in UI route handlers by ensuring proper function calls (e.g., using module prefixes or correct imports).&lt;/li&gt;
&lt;li&gt;Resolved a &lt;code&gt;TypeError&lt;/code&gt; in UI policy updates by ensuring all required arguments were passed to &lt;code&gt;generate_access_app_config_hash&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Fixed an &lt;code&gt;AttributeError&lt;/code&gt; in &lt;code&gt;update_cloudflared_container_status&lt;/code&gt; related to &lt;code&gt;None.startswith()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Corrected an issue with oversized SVG icons in the UI by fixing a class name typo.&lt;/li&gt;
&lt;li&gt;Improved robustness of &lt;code&gt;save_state&lt;/code&gt; by avoiding &lt;code&gt;copy.deepcopy()&lt;/code&gt; on entire rule objects and instead explicitly selecting fields for serialization.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Enhanced Logging:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Added more detailed logging, including object ID tracking during critical state operations, to aid in debugging shared state and threading issues.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content>
    <link href="https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.8.0" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.8.4</id>
    <title>New release for DockFlare: DockFlare v1.8.4 - Path Routing, Service Types, Access Policies &amp; UI Polish!</title>
    <updated>2025-05-28T09:45:01-04:00</updated>
    <author>
      <name>ChrispyBacon-dev/DockFlare</name>
    </author>
    <content>&lt;h2&gt;DockFlare v1.8.1 - Path Routing, Service Types, Access Policies &amp;amp; UI Polish!&lt;/h2&gt;
&lt;p&gt;DockFlare v1.8.1 is here, bringing highly requested &lt;strong&gt;Path-Based Routing&lt;/strong&gt;, versatile &lt;strong&gt;Extended Service Type Support&lt;/strong&gt;, more powerful &lt;strong&gt;Manual Rule creation with Access Policy support&lt;/strong&gt;, and several UI and backend improvements for a smoother and more robust experience!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;New Features &amp;amp; Major Enhancements:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Path-Based Routing for Ingress Rules:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Define specific URL paths on your hostnames to route to different backend services or parts of an application.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Labels:&lt;/strong&gt; Specify URL paths using &lt;code&gt;your-label-prefix.path=/your-service-path&lt;/code&gt; or &lt;code&gt;your-label-prefix.{index}.path=/your-service-path&lt;/code&gt;.&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Example:&lt;/em&gt; Expose &lt;code&gt;myapp.example.com/api&lt;/code&gt; by setting &lt;code&gt;cloudflare.tunnel.hostname=myapp.example.com&lt;/code&gt; and &lt;code&gt;cloudflare.tunnel.path=/api&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You can define multiple distinct hostnames, each with its own optional path, from a single Docker container using indexed labels (e.g., &lt;code&gt;cloudflare.tunnel.0.hostname&lt;/code&gt;, &lt;code&gt;cloudflare.tunnel.0.path&lt;/code&gt;, &lt;code&gt;cloudflare.tunnel.1.hostname&lt;/code&gt;, &lt;code&gt;cloudflare.tunnel.1.path&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Note on Docker Label Path Routing:&lt;/strong&gt; Currently, if a &lt;em&gt;single Docker container&lt;/em&gt; attempts to define multiple different paths for the &lt;em&gt;exact same hostname&lt;/em&gt; via its labels, only the last processed path definition for that hostname will be active. Subsequent path definitions for the same hostname from the same container will overwrite previous ones.&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Example:&lt;/em&gt; Labels for &lt;code&gt;app.example.com/api&lt;/code&gt; and &lt;code&gt;app.example.com/ui&lt;/code&gt; on the &lt;em&gt;same container&lt;/em&gt; would result in only one of these path rules being applied (the one with the highest index or processed last).&lt;/li&gt;
&lt;li&gt;To route multiple paths on the same hostname to different services using Docker labels, consider using separate containers for each service/path combination.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Manual Rules UI:&lt;/strong&gt; The "Add New Manual Ingress Rule" dialog now includes an optional "Path" field.&lt;ul&gt;
&lt;li&gt;The displayed "/" in the UI is automatically prepended; users just type the path segment (e.g., "app").&lt;/li&gt;
&lt;li&gt;You &lt;em&gt;can&lt;/em&gt; create multiple manual rules for the same hostname with different paths, each pointing to different services.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Functionality:&lt;/strong&gt; Cloudflare Tunnel ingress rules are configured with these paths. Requests matching &lt;code&gt;hostname + path&lt;/code&gt; are forwarded, appending the matched path and subsequent segments to the origin service URL.&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Example:&lt;/em&gt; Public &lt;code&gt;myapp.com/api/users&lt;/code&gt; with service &lt;code&gt;http://backend:3000&lt;/code&gt; and path &lt;code&gt;/api&lt;/code&gt; in DockFlare routes to &lt;code&gt;http://backend:3000/api/users&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UI Display:&lt;/strong&gt; The "Managed Ingress Rules" table now includes a "Path" column, showing "(root)" if no path is set. Clickable hostname links correctly include the path.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Extended Service Type Support:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DockFlare now robustly supports a wider range of service types beyond just HTTP/S, aligning with Cloudflare Tunnel capabilities. Supported types include: &lt;code&gt;http&lt;/code&gt;, &lt;code&gt;https&lt;/code&gt;, &lt;code&gt;tcp&lt;/code&gt;, &lt;code&gt;ssh&lt;/code&gt;, &lt;code&gt;rdp&lt;/code&gt;, and &lt;code&gt;http_status&lt;/code&gt; (for returning a specific HTTP status code).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Labels:&lt;/strong&gt; Specify the service type directly in your existing &lt;code&gt;service&lt;/code&gt; label. DockFlare will parse the prefix to determine the type.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cloudflare.tunnel.service=http://localservice:80&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cloudflare.tunnel.service=https://securelocal:443&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cloudflare.tunnel.service=tcp://gameserver:25565&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cloudflare.tunnel.service=ssh://internalhost:22&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cloudflare.tunnel.service=rdp://desktop:3389&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cloudflare.tunnel.service=http_status:404&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Manual Rules UI:&lt;/strong&gt; The "Add New Manual Ingress Rule" dialog features a clear "Service Type" dropdown. The "Service Address" input field dynamically guides the user based on the selected type (e.g., showing &lt;code&gt;tcp://&lt;/code&gt; prefix, expecting &lt;code&gt;host:port&lt;/code&gt; or just a status code).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Enhanced Manual Rule Creation with Access Policy Support:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Direct Access Policy Assignment:&lt;/strong&gt; When adding a new manual ingress rule via the UI, you can now directly assign a Cloudflare Access Policy:&lt;ul&gt;
&lt;li&gt;None (Public - No App)&lt;/li&gt;
&lt;li&gt;Bypass (Public App - creates a Cloudflare Access App with a bypass policy)&lt;/li&gt;
&lt;li&gt;Authenticate by Email (creates a Cloudflare Access App requiring email authentication)&lt;/li&gt;
&lt;li&gt;Use Default *.tld Policy (relies on an existing TLD wildcard policy, no app created by DockFlare for this rule)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A conditional "Allowed Email(s) or Domain(s)" field appears when "Authenticate by Email" is selected.&lt;/li&gt;
&lt;li&gt;This provides upfront security configuration for manually exposed services.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;UI Improvements for Manual Rule Modal:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The "Add New Manual Ingress Rule" dialog has been restructured for better clarity, grouping "Public Hostname," "Service," and "Access Policy" fields, inspired by the Cloudflare dashboard layout.&lt;/li&gt;
&lt;li&gt;Increased modal width for better readability and field layout on larger screens.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Fixes &amp;amp; Other Enhancements:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;State Management &amp;amp; Backend Logic:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;state.json&lt;/code&gt; correctly stores/loads &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;hostname_for_dns&lt;/code&gt; (for manual rules), and new access policy attributes for manual rules.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;update_cloudflare_config&lt;/code&gt; in &lt;code&gt;tunnel_manager.py&lt;/code&gt; now correctly uses the base FQDN hostname and &lt;code&gt;path&lt;/code&gt; when constructing ingress rules for the Cloudflare API.&lt;/li&gt;
&lt;li&gt;Logic for identifying DockFlare-managed rules in the Cloudflare API config now correctly considers paths for uniqueness.&lt;/li&gt;
&lt;li&gt;Enhanced sorting of ingress rules for Cloudflare API updates to ensure consistent ordering.&lt;/li&gt;
&lt;li&gt;Improved conditional deletion of DNS records and Access Applications when manual rules are removed, preventing premature deletion if resources are shared by other path-based rules on the same base hostname.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UI Display &amp;amp; Links:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Corrected display of hostnames for Docker-originated rules in the UI after path-handling changes.&lt;/li&gt;
&lt;li&gt;Links in the "Managed Ingress Rules" table now consistently use &lt;code&gt;https://&lt;/code&gt; (or the current scheme of the DockFlare UI) for external links.&lt;/li&gt;
&lt;li&gt;Fixed a Jinja2 template syntax error related to quote escaping in &lt;code&gt;onsubmit&lt;/code&gt; confirm dialogs.&lt;/li&gt;
&lt;li&gt;Resolved an issue where SVG icons (e.g., link icon in DNS records list) could render overly large by ensuring Tailwind CSS classes for sizing are correctly applied.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Service URL Validation:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Stricter validation for HTTP/S service URLs (from labels and UI) now disallows paths within the service definition itself (e.g., &lt;code&gt;http://host:port/api&lt;/code&gt; is invalid; path should be specified separately). For other types like TCP/SSH/RDP, the &lt;code&gt;host:port&lt;/code&gt; format is enforced. &lt;code&gt;http_status&lt;/code&gt; expects a status code.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Impact for Users:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Increased Flexibility &amp;amp; Granularity:&lt;/strong&gt; Path-based routing, extended service types, and direct access policy assignment offer significantly more control.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improved User Experience:&lt;/strong&gt; Clearer UI for adding rules, more accurate displays, and corrected link behaviors.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enhanced Stability:&lt;/strong&gt; Backend fixes ensure more reliable interaction with the Cloudflare API and state management.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No Change to Existing Root Rules:&lt;/strong&gt; Rules without a specified path continue to function as before.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;To Use New Features:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Path-Based Routing (Docker):&lt;/strong&gt; Add &lt;code&gt;{prefix}.path&lt;/code&gt; label. Remember the note above regarding multiple paths for the same hostname from a single container.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Extended Service Types (Docker):&lt;/strong&gt; Prefix your service URL in the &lt;code&gt;{prefix}.service&lt;/code&gt; label (e.g., &lt;code&gt;tcp://host:port&lt;/code&gt;, &lt;code&gt;http_status:503&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Manual Rules (Path, Service Type, Access Policy):&lt;/strong&gt; Use the updated "Add New Manual Ingress Rule" modal in the Web UI.&lt;/li&gt;
&lt;/ul&gt;</content>
    <link href="https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.8.4" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.8.5</id>
    <title>New release for DockFlare: DockFlare v1.8.5: Enhanced TLS Control with Origin Server Name (SNI) Support</title>
    <updated>2025-05-29T09:23:59-04:00</updated>
    <author>
      <name>ChrispyBacon-dev/DockFlare</name>
    </author>
    <content>&lt;h2&gt;DockFlare v1.8.5: Enhanced TLS Control with Origin Server Name (SNI) Support&lt;/h2&gt;
&lt;p&gt;This release introduces a key enhancement for configuring Cloudflare Tunnel ingress rules: support for &lt;strong&gt;Origin Server Name (SNI)&lt;/strong&gt;. This provides users with more granular control over TLS connections to their origin services.&lt;/p&gt;
&lt;h3&gt;‚ú® New Features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Origin Server Name (SNI) Support for Ingress Rules:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Users can now specify the &lt;code&gt;originServerName&lt;/code&gt; for an ingress rule. This allows DockFlare to instruct Cloudflare to use a specific Server Name Indication (SNI) during the TLS handshake with the origin service. This is particularly useful when the origin service is behind a reverse proxy, hosts multiple sites on one IP, or expects a specific hostname for its TLS certificate.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Label:&lt;/strong&gt; Added support for the &lt;code&gt;cloudflare.tunnel.&amp;lt;index&amp;gt;.originsrvname=&amp;lt;value&amp;gt;&lt;/code&gt; (or &lt;code&gt;cloudflare.tunnel.originsrvname=&amp;lt;value&amp;gt;&lt;/code&gt; for non-indexed default) label.&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;labels: ["cloudflare.tunnel.0.originsrvname=internal.service.local"]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Web UI (Manual Rules):&lt;/strong&gt; The "Add New Manual Ingress Rule" modal now includes a dedicated "Origin Server Name (SNI for TLS)" input field. This field is dynamically shown only when the selected service type is HTTP or HTTPS, as SNI is primarily relevant for these protocols.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;üîß Improvements &amp;amp; Internal Changes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;State Management:&lt;/strong&gt; The internal state (&lt;code&gt;managed_rules&lt;/code&gt;) now stores the &lt;code&gt;origin_server_name&lt;/code&gt; for each rule configuration.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cloudflare API Interaction:&lt;/strong&gt; The &lt;code&gt;originRequest&lt;/code&gt; object in the Cloudflare tunnel configuration payload is now correctly constructed to include &lt;code&gt;noTLSVerify&lt;/code&gt; and &lt;code&gt;originServerName&lt;/code&gt; as needed. Comparison logic for detecting changes has also been updated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Label Parsing:&lt;/strong&gt; Both &lt;code&gt;docker_handler.py&lt;/code&gt; (for new containers) and &lt;code&gt;reconciler.py&lt;/code&gt; (for existing containers during reconciliation) have been updated to parse and process the new &lt;code&gt;originsrvname&lt;/code&gt; label.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Web UI:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;The "Add Manual Rule" backend route (&lt;code&gt;ui_add_manual_rule_route&lt;/code&gt;) now processes and stores the &lt;code&gt;origin_server_name&lt;/code&gt; from the UI form.&lt;/li&gt;
&lt;li&gt;(Optional - if you implemented it) The main "Managed Ingress Rules" table can now display the configured SNI for relevant rules.&lt;/li&gt;
&lt;li&gt;JavaScript in &lt;code&gt;main.js&lt;/code&gt; has been enhanced to dynamically show/hide the "Origin Server Name" input field in the manual rule modal based on the selected service type (HTTP/HTTPS).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Code Quality:&lt;/strong&gt; Addressed a minor issue in &lt;code&gt;docker_handler.py&lt;/code&gt; by removing a duplicate, simpler definition of the &lt;code&gt;is_valid_service&lt;/code&gt; function, ensuring the more robust regex-based validation is used.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;üìù Notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;originServerName&lt;/code&gt; setting is most effective for &lt;code&gt;http&lt;/code&gt; and &lt;code&gt;https&lt;/code&gt; service types. While it can be set for other types, Cloudflare may ignore it if a TLS handshake to the origin is not part of its standard proxying behavior for that protocol.&lt;/li&gt;
&lt;li&gt;Remember to update your Docker image to &lt;code&gt;dockflare:1.8.5&lt;/code&gt; or &lt;code&gt;dockflare:latest&lt;/code&gt; to use these new features.&lt;/li&gt;
&lt;/ul&gt;</content>
    <link href="https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.8.5" rel="alternate"/>
  </entry>
</feed>
