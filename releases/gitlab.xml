<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://selfh.st/apps</id>
  <title>GitLab Releases</title>
  <updated>2025-03-04T12:30:54.043458-05:00</updated>
  <author>
    <name>selfh.st</name>
    <email>contact@selfh.st</email>
  </author>
  <link href="https://selfh.st/apps" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <subtitle>Self-hosted software releases generated by selfh.st</subtitle>
  <entry>
    <id>https://gitlab.com/gitlab-org/gitlab-foss/-/releases/v17.5.0</id>
    <title>New release for GitLab: GitLab 17.5</title>
    <updated>2024-10-17T00:00:00+00:00</updated>
    <author>
      <name>gitlab-org/gitlab-foss</name>
    </author>
    <content>&lt;p&gt;&lt;img alt="12 new features" src="https://img.shields.io/static/v1?color=108548&amp;amp;label=new+features&amp;amp;labelColor=525252&amp;amp;message=12&amp;amp;style=for-the-badge" title="New features added in this release" /&gt;
&lt;img alt="2283 total badges" src="https://img.shields.io/static/v1?color=1F75CB&amp;amp;label=total+features&amp;amp;labelColor=525252&amp;amp;message=2283&amp;amp;style=for-the-badge" title="Total features" /&gt;&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;[GitLab chart improvements](https://docs.gitlab.com/charts/) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;Cloud Native Installation&lt;/code&gt;&lt;/summary&gt;

&gt; GitLab 17.5 includes an update to our version of the NGINX Ingress Controller. The `nginx-controller` container image is now version 1.11.2. Please
&gt; note this includes new RBAC requirements because the new controller now uses endpointslices and requires an RBAC rule to access them.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Omnibus improvements](https://docs.gitlab.com/omnibus/) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;Omnibus Package&lt;/code&gt;&lt;/summary&gt;

&gt; GitLab 17.5 includes support for upgrading PostgreSQL from version 14.x to 16.x for single node installations. Automatic upgrades are not enabled and
&gt; so PostgreSQL upgrades must be triggered manually.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Configure agent and GitOps environment settings with the REST API](https://docs.gitlab.com/ee/api/environments.html): &lt;code&gt;Environment Management&lt;/code&gt;, &lt;code&gt;Deployment Management&lt;/code&gt;&lt;/summary&gt;

&gt; You can check the status of your pods and Flux reconciliation from the GitLab environments UI.
&gt; However, this approach is hard to scale because the required settings are exposed only through GraphQL or the UI.
&gt; Now, GitLab ships with REST API support for configuring an agent for Kubernetes, as well as setting the namespace and Flux resource per environment.
&gt; To further improve support for dynamic environments, [issue 467912](https://gitlab.com/gitlab-org/gitlab/-/issues/467912) proposes adding support for configuring these settings in CI/CD pipelines.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Easy bootstrapping of GitLab Kubernetes integration](https://docs.gitlab.com/ee/user/clusters/agent/install/#bootstrap-the-agent-with-flux-support-recommended): &lt;code&gt;Deployment Management&lt;/code&gt;&lt;/summary&gt;

&gt; GitLab offers flexible, reliable, and secure GitOps support with the [agent for Kubernetes](https://docs.gitlab.com/ee/user/clusters/agent/) and its [Flux integration](https://docs.gitlab.com/ee/user/clusters/agent/gitops.html).
&gt; Still, bootstrapping Flux with GitLab and setting up the agent for Kubernetes used to require a lot of documentation reading and switching between the GitLab UI and the terminal.
&gt; The GitLab CLI now offers [the `glab cluster agent bootstrap` command](https://gitlab.com/gitlab-org/cli/-/blob/main/docs/source/cluster/agent/bootstrap.md) to simplify installing the agent on top of an existing Flux installation. 
&gt; Now, you can configure Flux and the agent with just two simple commands.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Stream Kubernetes resource events](https://docs.gitlab.com/ee/ci/environments/kubernetes_dashboard.html): &lt;code&gt;Deployment Management&lt;/code&gt;&lt;/summary&gt;

&gt; GitLab provides a real-time view of your pods, as well as pod log streaming, all through the dashboard for Kubernetes.
&gt; In GitLab 17.4, we offered a static listing of resource-specific event information from the UI.
&gt; This release further improves the dashboard for Kubernetes by letting you stream incoming events as they emerge in the cluster.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Suspend or resume GitOps reconciliation from the GitLab UI](https://docs.gitlab.com/ee/ci/environments/kubernetes_dashboard.html#suspend-or-resume-flux-reconciliation): &lt;code&gt;Deployment Management&lt;/code&gt;&lt;/summary&gt;

&gt; As a Flux user, have you ever needed to quickly stop an automatic reconciliation or drift remediation? Have you wanted to trigger a `HelmRelease` to synchronize manually removed resources? These actions are best achieved with the Flux suspend and resume functions. Until now, your best option was to use the Flux CLI, which required a context switch and several commands to ensure the right resource was affected. In GitLab 17.5, you can suspend or resume a reconciliation from the built-in dashboard for Kubernetes.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/create/"&gt;Create&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Enhanced branch rules editing capabilities](https://docs.gitlab.com/ee/user/project/repository/branches/branch_rules.html#create-a-branch-rule): &lt;code&gt;Source Code Management&lt;/code&gt;&lt;/summary&gt;

&gt; In GitLab 15.10, we introduced a [consolidated view for branch-related settings and rules](https://about.gitlab.com/releases/2023/03/22/gitlab-15-10-released/#see-all-branch-related-settings-together). This view provided you with an easy way to understand the configuration of your project across multiple settings.
&gt; 
&gt; Building on this feature, you can now directly modify specific branch rules in this view, including branch protections, approval rules, and external status check configurations. These new capabilities lay the foundation for [continued improvements](https://gitlab.com/groups/gitlab-org/-/epics/12546) in branch configuration that will allow for greater flexibility in the future.
&gt; 
&gt; We encourage you to explore these new capabilities and to provide feedback. You can do this by contributing to our dedicated [feedback issue](https://gitlab.com/gitlab-org/gitlab/-/issues/486050).

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/verify/"&gt;Verify&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[GitLab Runner 17.5](https://docs.gitlab.com/runner): &lt;code&gt;GitLab Runner Core&lt;/code&gt;&lt;/summary&gt;

&gt; We’re also releasing GitLab Runner 17.5 today! GitLab Runner is the highly-scalable build agent that runs your CI/CD jobs and sends the results back to a GitLab instance. GitLab Runner works in conjunction with GitLab CI/CD, the open-source continuous integration service included with GitLab.
&gt; 
&gt; #### What's new:
&gt; 
&gt; - [Support AWS S3 multipart uploads with scoped temporary credentials](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26921)
&gt; 
&gt; #### Bug Fixes:
&gt; 
&gt; - [Jobs with extra services don't complete if one of the service container is not running](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/38035)
&gt; - [The `gitlab-runner-fips-17.4.0-1` package fails to run on Amazon Linux 2 and returns a glibc error](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/38034)
&gt; - [Cache doesn't work with Amazon S3 when using S3 Express One Zone endpoints](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/37394)
&gt; - [Jobs are unable to pull base images if the `DOCKER_AUTH_CONFIG` variable has multiple registries](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/28073)

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/package/"&gt;Package&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Enhance API performance when working with container registry tags](https://docs.gitlab.com/ee/api/container_registry.html#list-registry-repository-tags): &lt;code&gt;Container Registry&lt;/code&gt;&lt;/summary&gt;

&gt; We're excited to announce a significant improvement to our Container Registry API for self-managed GitLab instances. With the release of GitLab 17.5, we've implemented keyset pagination for the `:id/registry/repositories/:repository_id/tags` endpoint, bringing it in line with the functionality already available on GitLab.com. This enhancement is part of our ongoing efforts to improve API performance and provide a consistent experience across all GitLab deployments.
&gt; 
&gt; Keyset pagination offers a more efficient method for handling large datasets, resulting in improved performance and a better user experience. This update is particularly useful when managing large container registries, as it allows for smoother navigation through repository tags. In order to use this feature, self-managed instances must upgrade to the [next-generation container registry](https://docs.gitlab.com/ee/administration/packages/container_registry_metadata_database.html).

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/software_supply_chain_security/"&gt;Software supply chain security&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Improved user management summary](https://docs.gitlab.com/ee/user/profile/account/create_accounts.html#create-users-in-admin-area) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;User Management&lt;/code&gt;&lt;/summary&gt;

&gt; Administrators now have an enhanced, summarized view of the following critical pieces of information about the users on their instance:
&gt; 
&gt; - Pending approval.
&gt; - Without two-factor authentication.
&gt; - Administrators.
&gt; 
&gt; This increases user management efficiency, because administrators can quickly see how many users are in these states from the summary view, and filter on them.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[View token associations using API](https://docs.gitlab.com/ee/api/personal_access_tokens.html#list-token-associations): &lt;code&gt;System Access&lt;/code&gt;&lt;/summary&gt;

&gt; You can now view which groups, subgroups, and projects a token is associated with. This makes it easier to determine the impact of token expirations or revocations, and to understand where a token is able to be used.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Selective SAML single sign-on enforcement](https://docs.gitlab.com/ee/administration/settings/sign_in_restrictions.html#disable-password-authentication-for-users-with-an-sso-identity) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;User Management&lt;/code&gt;&lt;/summary&gt;

&gt; Previously, when SAML SSO was enabled, groups could choose to enforce SSO, which required all members to use SSO
&gt; authentication to access the group. However, some groups want the security of SSO enforcement for employees or
&gt; group members, while still allowing outside collaborators or contractors to access their groups without SSO.
&gt; 
&gt; Now, groups with SAML SSO enabled have SSO automatically enforced for all members
&gt; who have a SAML identity. Group members without SAML identities are not required to
&gt; use SSO unless SSO enforcement is explicitly enabled.
&gt; 
&gt; A member has a SAML identity if one or both of the following are true:
&gt; 
&gt; - They signed in to GitLab using their GitLab group's single sign-on URL.
&gt; - They were provisioned by SCIM.
&gt; 
&gt; To ensure smooth operation of the selective SSO enforcement feature, ensure your SAML configuration is
&gt; working properly before selecting the **Enable SAML authentication for this group** checkbox.

&lt;/details&gt;</content>
    <link href="https://gitlab.com/gitlab-org/gitlab-foss/-/releases/v17.5.0" rel="alternate"/>
  </entry>
  <entry>
    <id>https://gitlab.com/gitlab-org/gitlab-foss/-/releases/v17.6.0</id>
    <title>New release for GitLab: GitLab 17.6</title>
    <updated>2024-11-21T00:00:00+00:00</updated>
    <author>
      <name>gitlab-org/gitlab-foss</name>
    </author>
    <content>&lt;p&gt;&lt;img alt="15 new features" src="https://img.shields.io/static/v1?color=108548&amp;amp;label=new+features&amp;amp;labelColor=525252&amp;amp;message=15&amp;amp;style=for-the-badge" title="New features added in this release" /&gt;
&lt;img alt="2298 total badges" src="https://img.shields.io/static/v1?color=1F75CB&amp;amp;label=total+features&amp;amp;labelColor=525252&amp;amp;message=2298&amp;amp;style=for-the-badge" title="Total features" /&gt;&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;[Add support for values to the `glab agent bootstrap` command](https://gitlab.com/gitlab-org/cli/-/blob/main/docs/source/cluster/agent/bootstrap.md#options): &lt;code&gt;Deployment Management&lt;/code&gt;&lt;/summary&gt;

&gt; In the last release, we introduced support for easy agent bootstrapping to the GitLab CLI tool. GitLab 17.6 further improves the `glab cluster agent bootstrap` command with support for custom Helm values. You can use the `--helm-release-values` and `--helm-release-values-from` flags to customize the generated `HelmRelease` resource.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Select a GitLab agent for an environment in a CI/CD job](https://docs.gitlab.com/ee/ci/environments/kubernetes_dashboard.html#configure-a-dashboard-for-a-dynamic-environment): &lt;code&gt;Environment Management&lt;/code&gt;&lt;/summary&gt;

&gt; To use the dashboard for Kubernetes, you need to select an agent for Kubernetes connection from the environment settings. Until now, you could select the agent only from the UI or (from GitLab 17.5) the API, which made configuring a dashboard from CI/CD difficult. In GitLab 17.6, you can configure an agent connection with the `environment.kubernetes.agent` syntax.
&gt; In addition, [issue 500164](https://gitlab.com/gitlab-org/gitlab/-/issues/500164) proposes to add support for selecting a namespace and Flux resource from your CI/CD configuration.
&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Display release notes on deployment details page](https://docs.gitlab.com/ee/ci/environments/deployment_approvals.html#view-blocked-deployments): &lt;code&gt;Continuous Delivery&lt;/code&gt;&lt;/summary&gt;

&gt; Have you ever wondered what might be included in a deployment you've been asked to approve? In past versions, you could create a release with a detailed description about its content and instructions for testing, but the related environment-specific deployment did not show this data. We are happy to share that GitLab now displays the release notes under the related deployment details page.
&gt; 
&gt; Because GitLab releases are always created from a Git tag, the release notes are shown only on deployments related to the tag-triggered pipeline.
&gt; 
&gt; This feature was contributed to GitLab by [Anton Kalmykov](https://gitlab.com/antonkalmykov). Thank you!

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/plan/"&gt;Plan&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Deploy your Pages site with any CI/CD job](https://docs.gitlab.com/ee/user/project/pages/#user-defined-job-names): &lt;code&gt;Pages&lt;/code&gt;&lt;/summary&gt;

&gt; To give you more flexibility in designing your pipelines, you no longer 
&gt; need to name your Pages deploy job `pages`. You can now simply use the 
&gt; `pages` attribute in any CI/CD job to trigger a Pages deployment.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Easily remove closed items from your view](https://docs.gitlab.com/ee/user/group/epics/manage_epics.html): &lt;code&gt;Portfolio Management&lt;/code&gt;&lt;/summary&gt;

&gt; You can now hide closed items from the linked and child items lists by turning off the **Show closed items** toggle. With this addition, you have greater control over your view and can focus on active work while reducing visual clutter in complex projects.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/create/"&gt;Create&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Merge at a scheduled date and time](https://docs.gitlab.com/ee/user/project/merge_requests/auto_merge.html#prevent-merge-before-a-specific-date): &lt;code&gt;Code Review Workflow&lt;/code&gt;&lt;/summary&gt;

&gt; Some merge requests may need to be held for merging until after a certain date or time. When that date and time does pass you need to find someone with permissions to merge and hope they're available to take care of it for you. If this is after hours or the timeline is critical you may need to prepare folks well in advance for the task.
&gt; 
&gt; Now, when you create or edit a merge request you can specify a `merge after` date. This date will be used to prevent the merge request from being merged until it has passed. Using this new capability with our previously released [improvements to auto-merge](https://about.gitlab.com/releases/2024/09/19/gitlab-17-4-released/#auto-merge-when-all-checks-pass) gives you the flexibility to schedule merge requests to merge in the future.
&gt; 
&gt; A big thank you to [Niklas van Schrick](https://gitlab.com/Taucher2003) for the amazing contribution!

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/verify/"&gt;Verify&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[JaCoCo test coverage visualization now generally available](https://docs.gitlab.com/ee/ci/testing/test_coverage_visualization/jacoco.html): &lt;code&gt;Code Testing and Coverage&lt;/code&gt;&lt;/summary&gt;

&gt; You can now see JaCoCo test coverage results directly in your merge request diff view. This visualization allows you to quickly identify which lines are covered by tests and which need additional coverage before merging. 

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[GitLab Runner 17.6](https://docs.gitlab.com/runner): &lt;code&gt;GitLab Runner Core&lt;/code&gt;&lt;/summary&gt;

&gt; We’re also releasing GitLab Runner 17.6 today! GitLab Runner is the highly-scalable build agent that runs your CI/CD jobs and sends the results back to a GitLab instance. GitLab Runner works in conjunction with GitLab CI/CD, the open-source continuous integration service included with GitLab.
&gt; 
&gt; #### Bug Fixes:
&gt; 
&gt; - [In GitLab Runner 17.5.0, pods fail to become attachable](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/38260)
&gt; - [Runner crashes with `exec format error` when installing the fleeting plugin](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/38247)
&gt; - [Kubernetes executor pods with cgroup v2 enabled hang when OOMKilled](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/38244)
&gt; - [Runner defaults are not honoured when registering runner with a configuration template](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/38231)
&gt; - [GitLab Runner waits for Kubernetes pods to become attachable during the polling period when using exec mode](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/37244)
&gt; - [Authentication issues occur when the feature flag `FF_GIT_URLS_WITHOUT_TOKENS` is enabled](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/38268)

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/software_supply_chain_security/"&gt;Software supply chain security&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Audit events for privileged actions](https://docs.gitlab.com/ee/user/compliance/audit_event_types.html#groups-and-projects) &lt;i&gt;(self-managed only)&lt;/i&gt;&lt;/summary&gt;

&gt; There are now additional audit events for privileged settings-related administrator actions. A record of when these settings were changed can help improve security by providing an audit trail.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Disable OTP authenticator and WebAuthn devices independently](https://docs.gitlab.com/ee/user/profile/account/two_factor_authentication.html#disable-two-factor-authentication): &lt;code&gt;System Access&lt;/code&gt;&lt;/summary&gt;

&gt; It is now possible to disable the OTP authenticator and WebAuthn devices individually or simultaneously. Previously, if you disabled the OTP authenticator, the WebAuthn device(s) were also disabled. Because the two now operate independently, there is more granular control over these authentication methods. 

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Use API to get information about tokens](https://docs.gitlab.com/ee/api/admin/token.html) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;System Access&lt;/code&gt;&lt;/summary&gt;

&gt; Administrators can use the new token information API to get information about personal access tokens, deploy tokens, and feed tokens. Unlike other API endpoints that expose token information, this endpoint allows administrators to retrieve token information without knowing the type of the token.
&gt; 
&gt; Thank you [Nicholas Wittstruck](https://gitlab.com/nwittstruck) and the rest of the crew from Siemens for your contribution!

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[More information in sign in emails from new locations](https://docs.gitlab.com/ee/user/profile/notifications.html#notifications-for-unknown-sign-ins) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;System Access&lt;/code&gt;&lt;/summary&gt;

&gt; GitLab optionally sends an email when a sign-in from a new location is detected. Previously, this email only contained the IP address, which is difficult to correlate to a location. This email now contains city and country location information as well.
&gt; 
&gt; Thank you [Henry Helm](https://gitlab.com/shangsuru) for your contribution! 

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Admin setting to enforce CI/CD job token allowlist](https://docs.gitlab.com/ee/administration/settings/continuous_integration.html#job-token-permissions) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;Secrets Management&lt;/code&gt;&lt;/summary&gt;

&gt; Previously, we announced that the default CI/CD job token (`CI_JOB_TOKEN`) behavior [will change in GitLab 18.0](https://docs.gitlab.com/ee/update/deprecations.html#default-cicd-job-token-ci_job_token-scope-changed), requiring you to explicitly add indvidual [projects or groups to your project's job token allowlist](https://docs.gitlab.com/ee/ci/jobs/ci_job_token.html#add-a-group-or-project-to-the-job-token-allowlist) if you want them to continue to be able to access your project.
&gt; 
&gt; Now, we are giving self-managed and Dedicated instance administrators the ability to enforce this more secure setting on all projects on an instance. After you enable this setting, all projects will need to make use of their allowlist if they want to use CI/CD job tokens for authentication. _Note: We recommend enabling this setting as part of a strong security policy._

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Track CI/CD job token authentications](https://docs.gitlab.com/ee/ci/jobs/ci_job_token.html#job-token-authentication-log): &lt;code&gt;Secrets Management&lt;/code&gt;&lt;/summary&gt;

&gt; Previously it was difficult to track which other projects were using accessing your project by authenticating with CI/CD job tokens. To make it easier for you to audit and control access to your project, we've added an authentication log.
&gt; 
&gt; With this authentication log, you can view the list of other projects that have used a job token to authenticate with your project, both in the UI and as a downloadable CSV file. This data can be used to audit project access and aid in populating the job token allowlist to enable stronger [control over which projects can access your project](https://docs.gitlab.com/ee/ci/jobs/ci_job_token.html#control-job-token-access-to-your-project). 

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/modelops/"&gt;Modelops&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Model registry now generally available](https://docs.gitlab.com/ee/user/project/ml/model_registry/): &lt;code&gt;MLOps&lt;/code&gt;&lt;/summary&gt;

&gt; GitLab's model registry, now generally available, is your centralized hub for managing machine learning models as part of your existing GitLab workflow. You can track model versions, store artifacts and metadata, and maintain comprehensive documentation in the model card.
&gt; 
&gt; Built for seamless integration, the model registry works natively with [MLflow clients]( https://docs.gitlab.com/ee/user/project/ml/experiment_tracking/mlflow_client.html) and connects directly to your CI/CD pipelines, enabling automated model deployment and testing. Data scientists can manage models through an intuitive UI or existing MLflow workflows, while MLOps teams can leverage semantic versioning and CI/CD integration for streamlined production deployments all within the [GitLab API](https://docs.gitlab.com/ee/api/model_registry.html).
&gt; 
&gt;  Please feel free to drop us a note in our [feedback issue](https://gitlab.com/gitlab-org/gitlab/-/issues/504458) and we'll get back in touch! Get started today by going to **Deploy &gt; Model registry** in your GitLab instance.

&lt;/details&gt;</content>
    <link href="https://gitlab.com/gitlab-org/gitlab-foss/-/releases/v17.6.0" rel="alternate"/>
  </entry>
  <entry>
    <id>https://gitlab.com/gitlab-org/gitlab-foss/-/releases/v17.7.0</id>
    <title>New release for GitLab: GitLab 17.7</title>
    <updated>2024-12-19T00:00:00+00:00</updated>
    <author>
      <name>gitlab-org/gitlab-foss</name>
    </author>
    <content>&lt;p&gt;&lt;img alt="12 new features" src="https://img.shields.io/static/v1?color=108548&amp;amp;label=new+features&amp;amp;labelColor=525252&amp;amp;message=12&amp;amp;style=for-the-badge" title="New features added in this release" /&gt;
&lt;img alt="2310 total badges" src="https://img.shields.io/static/v1?color=1F75CB&amp;amp;label=total+features&amp;amp;labelColor=525252&amp;amp;message=2310&amp;amp;style=for-the-badge" title="Total features" /&gt;&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;[Omnibus improvements](https://docs.gitlab.com/omnibus/) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;Omnibus Package&lt;/code&gt;&lt;/summary&gt;

&gt; Because of a bug, FIPS Linux packages for GitLab 17.6 and earlier did not use the system Libgcrypt, but the same Libgcrypt bundled with regular Linux packages.
&gt; 
&gt; This issue is fixed for all FIPS Linux packages for GitLab 17.7, except for AmazonLinux 2. The Libgcrypt version of AmazonLinux 2 is not compatible with the GPGME and GnuPG versions shipped with the FIPS Linux packages.
&gt; 
&gt; FIPS Linux packages for AmazonLinux 2 will continue to use the same Libgcrypt bundled with the regular Linux packages, otherwise we would have to downgrade GPGME and GnuPG.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Setting `environment.action: access` and `prepare` resets the `auto_stop_in` timer](https://docs.gitlab.com/ee/ci/yaml/#environmentauto_stop_in): &lt;code&gt;Deployment Management&lt;/code&gt;&lt;/summary&gt;

&gt; Previously, when using the `action: prepare`, `action: verify`, and `action: access` jobs together with the `auto_stop_in` setting, the timer was not reset. Starting in 18.0, `action: prepare` and `action: access` will reset the timer, while `action: verify` leaves it untouched.
&gt; 
&gt; For now, you can change to the new implementation by enabling the `prevent_blocking_non_deployment_jobs` feature flag.
&gt; 
&gt; Multiple breaking changes are intended to differentiate the behavior of the `environment.action: prepare | verify | access` values. The `environment.action: access` keyword will remain the closest to its current behavior, except for the timer reset.
&gt; 
&gt; To prevent future compatibility issues, you should review your use of these keywords.
&gt; Learn more about these proposed changes in the following issues:
&gt; 
&gt; - [Issue 437132](https://gitlab.com/gitlab-org/gitlab/-/issues/437132)
&gt; - [Issue 437133](https://gitlab.com/gitlab-org/gitlab/-/issues/437133)
&gt; - [Issue 437142](https://gitlab.com/gitlab-org/gitlab/-/issues/437142)

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Kubernetes 1.31 support](https://docs.gitlab.com/ee/user/clusters/agent/#supported-kubernetes-versions-for-gitlab-features): &lt;code&gt;Deployment Management&lt;/code&gt;&lt;/summary&gt;

&gt; This release adds full support for Kubernetes version 1.31, released in August 2024. If you deploy your apps to Kubernetes, you can now upgrade your connected clusters to the most recent version and take advantage of all its features.
&gt; 
&gt; For more information, see our [Kubernetes support policy and other supported Kubernetes versions](https://docs.gitlab.com/ee/user/clusters/agent/#supported-kubernetes-versions-for-gitlab-features).

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Set namespace and Flux resource path from CI/CD job](https://docs.gitlab.com/ee/ci/environments/kubernetes_dashboard.html): &lt;code&gt;Environment Management&lt;/code&gt;, &lt;code&gt;Deployment Management&lt;/code&gt;&lt;/summary&gt;

&gt; To use the dashboard for Kubernetes, you need to select an agent for Kubernetes connection from the environment settings, and optionally configure a namespace and a Flux resource to track the reconciliation status. In GitLab 17.6, we added support for selecting an agent with a CI/CD configuration. However, configuring the namespace and the Flux resource still required you to use the UI or make an API call. In 17.7, you can fully configure the dashboard using the CI/CD syntax with the `environment.kubernetes.namespace` and `environment.kubernetes.flux_resource_path` attributes.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;SCA Vulnerability Prioritizer&lt;/summary&gt;

&gt; This experimental feature is another step in helping users prioritize vulnerabilities identified during [Dependency Scanning](https://docs.gitlab.com/ee/user/application_security/dependency_scanning/index.html) or [Container Scanning](https://docs.gitlab.com/ee/user/application_security/container_scanning/index.html). Users may include this CI/CD component in their `.gitlab-ci.yml` file, which will generate a prioritization report for vulnerabilities found in the project. The report will print to the pipeline output.
&gt; 
&gt; The component queries the GitLab GraphQL API to retrieve vulnerability data and prioritizes as follows:
&gt; 
&gt; 1. Vulnerabilities with known exploits (KEV) are the top priority.
&gt; 2. Vulnerabilities with high EPSS scores.
&gt; 3. Higher severity vulnerabilities.
&gt; 
&gt; Only detected and confirmed vulnerabilities are shown. Currently, the component relies on EPSS and KEV data to help prioritize vulnerabilities. EPSS and KEV data are only found on CVEs, which are collected through dependency and container scanning. To learn more, please refer to the [Vulnerability Prioritizer](https://gitlab.com/components/vulnerability-prioritizer).
&gt; 
&gt; As always, we welcome your feedback. Please add any questions or comments to the [feedback issue](https://gitlab.com/gitlab-org/gitlab/-/issues/509508).

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[New user contribution and membership mapping available in direct transfer](https://docs.gitlab.com/ee/user/project/import/#user-contribution-and-membership-mapping): &lt;code&gt;Importers&lt;/code&gt;&lt;/summary&gt;

&gt; The new method of user contribution and membership mapping is now available when you migrate between GitLab instances by [direct transfer](https://docs.gitlab.com/ee/user/group/import/index.html). This feature offers flexibility and control for both users managing the import process and users receiving contribution reassignments. With the new method, you can:
&gt; 
&gt; - Reassign memberships and contributions to existing users on the destination instance after the import has completed. Any memberships and contributions you import are first mapped to placeholder users. All contributions appear associated with placeholders until you reassign them on the destination instance.
&gt; - Map memberships and contributions for users with different email addresses on source and destination instances.
&gt; 
&gt; When you reassign a contribution to a user on the destination instance, the user can accept or reject the reassignment.
&gt; 
&gt; For more information, see [streamline migrations with user contribution and membership mapping](https://about.gitlab.com/blog/2024/11/25/streamline-migrations-with-user-contribution-and-membership-mapping/). To leave feedback, add a comment to [issue 502565](https://gitlab.com/gitlab-org/gitlab/-/issues/502565).

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/plan/"&gt;Plan&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Unicode 15.1 emoji support 🦖🍋‍🟩🐦‍🔥](https://gitlab-org.gitlab.io/ruby/gems/tanuki_emoji/): &lt;code&gt;Markdown&lt;/code&gt;&lt;/summary&gt;

&gt; In previous versions of GitLab, emoji support was limited to an older Unicode standard, which meant some newer emojis were unavailable.
&gt; 
&gt; GitLab 17.7 introduces support for Unicode 15.1, bringing the latest emoji additions. This includes exciting new options like the t-rex 🦖, lime 🍋‍🟩, and phoenix 🐦‍🔥, allowing you to express yourself with the most up-to-date symbols.
&gt; 
&gt; Additionally, this update enhances emoji diversity, ensuring greater representation across cultures, languages,
&gt; and identities, helping everyone feel included when communicating on the platform.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Set your preferred text editor as default](https://docs.gitlab.com/ee/user/profile/preferences.html#set-the-default-text-editor): &lt;code&gt;Text Editors&lt;/code&gt;&lt;/summary&gt;

&gt; In this version, we're introducing the ability to set a default text editor for a more personalized editing experience. With this change, you can now choose between the rich text editor, the plain text editor, or opt for no default, allowing flexibility in how you create and edit content. 
&gt; 
&gt; This update ensures smoother workflows by aligning the editor interface with individual preferences or team standards. With this enhancement, GitLab continues to prioritize customization and usability for all users.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[New Planner user role](https://docs.gitlab.com/ee/user/permissions.html): &lt;code&gt;Portfolio Management&lt;/code&gt;&lt;/summary&gt;

&gt; We've introduced the new Planner role to give you tailored access to Agile planning tools like epics, roadmaps, and Kanban boards without over-provisioning [permissions](https://docs.gitlab.com/ee/user/permissions.html). This change helps you collaborate more effectively while keeping your workflows secure and aligned with the principle of least privilege.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/software_supply_chain_security/"&gt;Software supply chain security&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Extended token expiration notifications](https://docs.gitlab.com/ee/security/tokens/): &lt;code&gt;System Access&lt;/code&gt;&lt;/summary&gt;

&gt; Previously, token expiration email notifications were only sent seven days before expiry. Now, these notifications are also sent 30 and 60 days before expiry. The increased frequency and date range of notifications makes users more aware of tokens that may be expiring soon. 

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[New description field for access tokens](https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html#create-a-personal-access-token): &lt;code&gt;System Access&lt;/code&gt;&lt;/summary&gt;

&gt; When creating a personal, project, group, or impersonation access token, you can now optionally enter a description of that token. This helps provide extra context about the token, such as where and how is it used.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Rotate personal, project, and group access tokens in the UI](https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html#revoke-or-rotate-a-personal-access-token): &lt;code&gt;System Access&lt;/code&gt;&lt;/summary&gt;

&gt; You can now use the UI to rotate personal, project, and group access tokens. Previously, you had to use the API to do this.
&gt; 
&gt; Thank you [shangsuru](https://gitlab.com/shangsuru) for your contribution!

&lt;/details&gt;</content>
    <link href="https://gitlab.com/gitlab-org/gitlab-foss/-/releases/v17.7.0" rel="alternate"/>
  </entry>
  <entry>
    <id>https://gitlab.com/gitlab-org/gitlab-foss/-/releases/v17.8.0</id>
    <title>New release for GitLab: GitLab 17.8</title>
    <updated>2025-01-16T00:00:00+00:00</updated>
    <author>
      <name>gitlab-org/gitlab-foss</name>
    </author>
    <content>&lt;p&gt;&lt;img alt="11 new features" src="https://img.shields.io/static/v1?color=108548&amp;amp;label=new+features&amp;amp;labelColor=525252&amp;amp;message=11&amp;amp;style=for-the-badge" title="New features added in this release" /&gt;
&lt;img alt="2321 total badges" src="https://img.shields.io/static/v1?color=1F75CB&amp;amp;label=total+features&amp;amp;labelColor=525252&amp;amp;message=2321&amp;amp;style=for-the-badge" title="Total features" /&gt;&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;[View paused Flux reconciliations on the dashboard for Kubernetes](https://docs.gitlab.com/ee/ci/environments/kubernetes_dashboard.html): &lt;code&gt;Deployment Management&lt;/code&gt;&lt;/summary&gt;

&gt; Previously, when you suspended Flux reconciliation from the dashboard for Kubernetes, there was no clear indicator of the suspended state. We've added a new "Paused" status to the existing set of status indicators, making it clear when Flux reconciliation is suspended and providing better visibility into the state of your deployments.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Search for pods on the dashboard for Kubernetes](https://docs.gitlab.com/ee/ci/environments/kubernetes_dashboard.html): &lt;code&gt;Environment Management&lt;/code&gt;, &lt;code&gt;Deployment Management&lt;/code&gt;&lt;/summary&gt;

&gt; On the dashboard for Kubernetes, finding specific pods in large deployments can be time-consuming. A new search bar lets you quickly filter pods by name. The search works across all available pods, and you can combine it with status filters to find exactly the pods you need to monitor or troubleshoot.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Track multiple to-do items in an issue or merge request](https://docs.gitlab.com/ee/user/todos.html#actions-that-create-to-do-items): &lt;code&gt;Notifications&lt;/code&gt;&lt;/summary&gt;

&gt; You can now keep track of multiple discussions and mentions within a single issue or merge request. With the new multiple to-do items feature, you'll receive separate to-do items for each mention or action, ensuring you don't miss important updates or requests for your attention. This enhancement helps you manage your work more effectively and respond to your team's needs more efficiently.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Project creation protection for groups now includes Owners](https://docs.gitlab.com/ee/user/group/index.html#specify-who-can-add-projects-to-a-group): &lt;code&gt;Groups &amp; Projects&lt;/code&gt;&lt;/summary&gt;

&gt; Project creation can be restricted to specific roles in a group using the **Allowed to create projects** setting. The Owner role is now available as an option, enabling you to restrict new project creation to users with the Owner role for the group. This role was previously unavailable in the selection options. 
&gt; 
&gt; Thank you [@yasuk](https://gitlab.com/yasuk) for this community contribution!

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[List the deployments related to a release](https://docs.gitlab.com/ee/user/project/releases/): &lt;code&gt;Environment Management&lt;/code&gt;, &lt;code&gt;Deployment Management&lt;/code&gt;&lt;/summary&gt;

&gt; While GitLab has long supported creating releases from Git tags and tracking deployments, this information previously lived in multiple separate places that were difficult to piece together. Now, you can see all deployments related to a release directly on the release page. Release managers can quickly verify where a release has been deployed and which environments are pending deployment. This complements the existing deployment page integration that shows release notes for tagged deployments.
&gt; 
&gt; We would like to express our gratitude to [Anton Kalmykov](https://gitlab.com/antonkalmykov) for contributing both features to GitLab.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/plan/"&gt;Plan&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Primary domain redirect for GitLab Pages](https://docs.gitlab.com/ee/user/project/pages/#primary-domain): &lt;code&gt;Pages&lt;/code&gt;&lt;/summary&gt;

&gt; You can now set a primary domain in GitLab Pages to automatically redirect all requests from custom domains to your primary domain. This helps maintain SEO rankings and provides a consistent brand experience by directing visitors to your preferred domain, regardless of which URL they initially use to access your site.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/verify/"&gt;Verify&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Pipeline limits available in GitLab Community Edition](https://docs.gitlab.com/ee/administration/settings/continuous_integration.html#set-cicd-limits) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;Continuous Integration (CI)&lt;/code&gt;&lt;/summary&gt;

&gt; Administrators can now control pipeline resource usage by setting CI/CD limits for their GitLab Community Edition installations. Previously, this feature was only available in GitLab Enterprise Edition.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/package/"&gt;Package&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Safeguard your dependencies with protected packages](https://docs.gitlab.com/ee/user/packages/package_registry/package_protection_rules.html): &lt;code&gt;Package Registry&lt;/code&gt;&lt;/summary&gt;

&gt; We're thrilled to introduce support for protected PyPI packages, a new feature designed to enhance the security and stability of your GitLab package registry. In the fast-paced world of software development, accidental modification or deletion of packages can disrupt entire development processes. Protected packages address this issue by allowing you to safeguard your most important dependencies against unintended changes.
&gt; 
&gt; From GitLab 17.8, you can protect PyPI packages by creating protection rules. If a package is matched by a protection rule, only specified users can update or delete the package. With this feature, you can prevent accidental changes, improve compliance with regulatory requirements, and streamline your workflows by reducing the need for manual oversight.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Enhance security with protected container repositories](https://docs.gitlab.com/ee/user/packages/container_registry/container_repository_protection_rules.html): &lt;code&gt;Container Registry&lt;/code&gt;&lt;/summary&gt;

&gt; We're thrilled to announce the rollout of protected container repositories, a new feature in GitLab's container registry that addresses security and control challenges in managing container images. Organizations often struggle with unauthorized access to sensitive container repositories, accidental modifications, lack of granular control, and difficulties in maintaining compliance. This solution provides enhanced security through strict access controls, granular permissions for push, pull, and management operations, and seamless integration with GitLab CI/CD pipelines.
&gt; 
&gt; Protected container repositories offers value to users by reducing the risk of security breaches and accidental changes to critical assets. This feature streamlines workflows by maintaining security without sacrificing development speed, improves overall governance of the container registry, and provides peace of mind knowing that important container assets are protected according to organizational needs. 
&gt; 
&gt; This feature and the [protected packages](https://gitlab.com/groups/gitlab-org/-/epics/5574) feature are both community contributions from `gerardo-navarro` and the Siemens crew. Thank you Gerardo and the rest of the crew from Siemens for their many contributions to GitLab! If you are interesting in learning more about how Gerardo and the Siemens crew contributed this change, check out this [video](https://www.youtube.com/watch?v=5-nQ1_Mi7zg) in which Gerardo shares his learnings and best practices for contributing to GitLab based on his experience as an external contributor.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/modelops/"&gt;Modelops&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[GitLab MLOps Python Client Beta](https://gitlab.com/gitlab-org/modelops/mlops/gitlab-mlops): &lt;code&gt;MLOps&lt;/code&gt;&lt;/summary&gt;

&gt; Data scientists and Machine Learning engineers primarily work in Python environments, but integrating their machine learning workflows with GitLab's MLOps features often requires context switching and understanding of GitLab's API structure. This can create friction in their development process and slow down their ability to track experiments, manage model artifacts, and collaborate with team members.
&gt; 
&gt; The new GitLab MLOps Python client provides a seamless, Pythonic interface to GitLab's MLOps features. Data scientists can now interact with GitLab's [experiment tracking](https://docs.gitlab.com/ee/user/project/ml/experiment_tracking/) and [model registry](https://docs.gitlab.com/ee/user/project/ml/model_registry/) capabilities directly from their Python scripts and notebooks. The client includes:
&gt; 
&gt; - **GitLab Experiment Tracking**: Easily track machine learning experiments within GitLab.
&gt; - **Model Registry Integration**: Register and manage models in GitLab's model registry.
&gt; - **Experiment Management**: Create and manage experiments directly from the client.
&gt; - **Run Tracking**: Initiate and monitor training runs with ease.
&gt; 
&gt; This integration allows data scientists to focus on model development while automatically capturing their ML lifecycle metadata in GitLab. The Python client works seamlessly with existing ML workflows and requires minimal setup, making GitLab's MLOps features more accessible to the data science community.
&gt; 
&gt; We welcome the wider Python and data science community to contributions and share feedback directly in our [project's repository](https://gitlab.com/gitlab-org/modelops/mlops/gitlab-mlops)

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Machine learning model experiments tracking in GA](https://docs.gitlab.com/ee/user/project/ml/experiment_tracking/): &lt;code&gt;MLOps&lt;/code&gt;&lt;/summary&gt;

&gt; When creating machine learning models, data scientists often experiment with different parameters, configurations, and feature engineering to improve the performance of the model. Keeping track of all this metadata and the associated artifacts so that the data scientist can later replicate the experiment is not trivial. Machine learning experiment tracking enables them to log parameters, metrics, and artifacts directly into GitLab, giving easy access later on while also keeping all experimental data within your GitLab environment. This feature is now generally available with enhanced data displays, enhanced permissions, deeper integration with GitLab, and bug fixes.

&lt;/details&gt;</content>
    <link href="https://gitlab.com/gitlab-org/gitlab-foss/-/releases/v17.8.0" rel="alternate"/>
  </entry>
  <entry>
    <id>https://gitlab.com/gitlab-org/gitlab-foss/-/releases/v17.9.0</id>
    <title>New release for GitLab: GitLab 17.9</title>
    <updated>2025-02-20T00:00:00+00:00</updated>
    <author>
      <name>gitlab-org/gitlab-foss</name>
    </author>
    <content>&lt;p&gt;&lt;img alt="16 new features" src="https://img.shields.io/static/v1?color=108548&amp;amp;label=new+features&amp;amp;labelColor=525252&amp;amp;message=16&amp;amp;style=for-the-badge" title="New features added in this release" /&gt;
&lt;img alt="2337 total badges" src="https://img.shields.io/static/v1?color=1F75CB&amp;amp;label=total+features&amp;amp;labelColor=525252&amp;amp;message=2337&amp;amp;style=for-the-badge" title="Total features" /&gt;&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;[Simplified access to deployments within project environments](https://docs.gitlab.com/ee/ci/environments/): &lt;code&gt;Environment Management&lt;/code&gt;&lt;/summary&gt;

&gt; Have you ever struggled to get an overview of your deployments within a project? You can now view recent deployment details in the environments list without having to expand each environment. For each environment, the list shows your latest successful deployment and, if different, your most recent deployment attempt.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Composite identity for more secure AI connections](https://docs.gitlab.com/development/ai_features/composite_identity/): &lt;code&gt;Duo Workflow&lt;/code&gt;&lt;/summary&gt;

&gt; Previously, a request to GitLab could only be authenticated as a single user. With composite identity, we have now made it possible to authenticate a request as a service account and a user simultaneously.
&gt; AI agent use cases often require permissions to be based on the user who initiated the tasks in a system, while simultaneously showing a distinct identity that's separate from the initiating user. A composite identity is our new identity principal, which represents an AI agent's identity. This identity is linked with the identity of the human user who requests actions from the agent.
&gt; Whenever an AI agent action attempts to access a resource, a composite identity token is used. This token belongs to a service account, and is also linked with the human user who is instructing the agent. The authorization checks that run on the token take into account both principals before granting access to a resource. Both identities need to have access to the resource, otherwise access is denied.
&gt; This new functionality enhances our ability to protect resources stored in GitLab.
&gt; For more information about how the composite identity for service accounts can be used, see the [documentation](https://docs.gitlab.com/development/ai_features/composite_identity/).
&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Implement OCI-based GitOps with the FluxCD CI/CD component](https://gitlab.com/components/fluxcd/): &lt;code&gt;Container Registry&lt;/code&gt;, &lt;code&gt;Deployment Management&lt;/code&gt;, &lt;code&gt;Component Catalog&lt;/code&gt;&lt;/summary&gt;

&gt; Have you ever wondered how to implement GitOps best practices with GitLab? The new [FluxCD component](https://gitlab.com/components/fluxcd/) makes it easy. Use the FluxCD component to package Kubernetes manifests into OCI images and store the images in OCI-compatible container registries. You can optionally sign the images and trigger an immediate FluxCD reconciliation.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Get started with the GitLab integration with Kubernetes](https://docs.gitlab.com/ee/user/clusters/agent/getting_started): &lt;code&gt;Deployment Management&lt;/code&gt;&lt;/summary&gt;

&gt; In this release, we added new Kubernetes Getting started guides that show you how to use GitLab to deploy applications to Kubernetes directly and with FluxCD. These easy-to-follow tutorials don't require in-depth Kubernetes knowledge to complete, so both novice and experienced users can learn how to integrate GitLab and Kubernetes.
&gt; 
&gt; To supplement the Kubernetes Getting started guides, we also included a series of recommendations for integrating GitLab into Kubernetes environments.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Discover and migrate certificate-based Kubernetes clusters](https://docs.gitlab.com/ee/api/cluster_discovery.html)&lt;/summary&gt;

&gt; The certificate-based Kubernetes integration will be turned off on GitLab.com for all users between May 6, 2025 9:00 AM UTC and May 8, 2025 22:00 PM UTC, and will be removed from GitLab Self-Managed instances in GitLab 19.0 (expected in May 2026). 
&gt; 
&gt; To help users migrate, we added a new cluster API endpoint that group Owners can query to [discover any certificate-based clusters](https://docs.gitlab.com/ee/api/cluster_discovery.html) registered to a group, subgroup, or project. We also updated the [migration documentation](https://docs.gitlab.com/ee/user/infrastructure/clusters/migrate_to_gitlab_agent.html) to provide instructions for different types of use cases.
&gt; 
&gt; We encourage all GitLab.com users to check if they are affected, and to plan their migrations as soon as possible.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Manage project integrations from a group with the REST API](https://docs.gitlab.com/ee/api/group_integrations.html): &lt;code&gt;API&lt;/code&gt;, &lt;code&gt;Integrations&lt;/code&gt;&lt;/summary&gt;

&gt; Previously, you could manage project integrations from a group in the GitLab UI only. With this release, it's possible to manage these integrations with the REST API too.
&gt; 
&gt; Thanks to [Van](https://gitlab.com/van.m.anderson) for their [initial community contribution](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/148283), which was subsequently picked up and completed by GitLab.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Group sharing visibility enhancement](https://docs.gitlab.com/user/project/members/sharing_projects_groups/#view-shared-groups): &lt;code&gt;Groups &amp; Projects&lt;/code&gt;&lt;/summary&gt;

&gt; We're excited to announce expanded visibility for group sharing across GitLab. Previously, while you could see shared projects on a group's overview page, you couldn't see which groups your group had been invited to join. Now you can view both **Shared projects** and **Shared groups** tabs on the group overview page, giving you a complete view of how your groups are connected and shared throughout your organization. This makes it easier to audit and manage group access across your organization.
&gt; 
&gt; We welcome feedback about this change in [epic 16777](https://gitlab.com/groups/gitlab-org/-/epics/16777).

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/plan/"&gt;Plan&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Wiki page comments](https://docs.gitlab.com/ee/user/discussions/): &lt;code&gt;Wiki&lt;/code&gt;&lt;/summary&gt;

&gt; You can now add comments directly on wiki pages, transforming your documentation into an interactive collaboration space.
&gt; 
&gt; Comments and threads on wiki pages help teams:
&gt; 
&gt; - Discuss content directly in context.
&gt; - Suggest improvements and corrections.
&gt; - Keep documentation accurate and up-to-date.
&gt; - Share knowledge and expertise.
&gt; 
&gt; With wiki comments, teams can maintain living documentation that evolves alongside their projects through direct feedback and discussion.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Control access to GitLab Pages for groups](https://docs.gitlab.com/ee/user/project/pages/pages_access_control.html#restrict-pages-access-to-project-members-for-the-group-and-its-subgroups): &lt;code&gt;Pages&lt;/code&gt;&lt;/summary&gt;

&gt; You can now restrict GitLab Pages access at the group level. Group owners can enable a single setting to make all Pages sites in a group and its subgroups visible only to project members. This centralized control simplifies security management without modifying individual project settings.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Change work item type to another](https://docs.gitlab.com/ee/user/tasks.html#convert-a-task-into-another-item-type): &lt;code&gt;Portfolio Management&lt;/code&gt;&lt;/summary&gt;

&gt; You can now easily change the type of your work items, giving you the flexibility to manage your projects more efficiently.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Work items GraphQL API - additional query filters](https://docs.gitlab.com/ee/api/graphql/reference/): &lt;code&gt;Portfolio Management&lt;/code&gt;&lt;/summary&gt;

&gt; The Work Items GraphQL API now includes additional query filters that let you filter by:
&gt; 
&gt; - Created, updated, closed, and due dates
&gt; - Health status
&gt; - Weight
&gt; 
&gt; These new filters give you more control when querying and organizing work items through the API.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/verify/"&gt;Verify&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Automatic CI/CD pipeline cleanup](https://docs.gitlab.com/ee/ci/pipelines/settings.html#automatic-pipeline-cleanup): &lt;code&gt;Continuous Integration (CI) Scaling&lt;/code&gt;&lt;/summary&gt;

&gt; In the past, if you wanted to delete older CI/CD pipelines, you could only do this through the API.
&gt; 
&gt; In GitLab 17.9, we have introduced a project setting that allows you to set a CI/CD pipeline expiry time.
&gt; Any pipelines and related artifacts older than the defined retention period are deleted.
&gt; This can help reduce the disk usage in projects that run lots of pipelines that generate large artifacts, and even improve overall performance.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[GitLab Runner 17.9](https://docs.gitlab.com/runner): &lt;code&gt;GitLab Runner Core&lt;/code&gt;&lt;/summary&gt;

&gt; We're also releasing GitLab Runner 17.9 today! GitLab Runner is the highly-scalable build agent that runs 
&gt; your CI/CD jobs and sends the results back to a GitLab instance. GitLab Runner works in conjunction with 
&gt; GitLab CI/CD, the open-source continuous integration service included with GitLab.
&gt; 
&gt; #### What's new:
&gt; 
&gt; - [Add health check for runner autoscaler instances](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/38271)
&gt; - [Add histogram metrics for runner prepare stage duration](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/37471)
&gt; - [Add support for custom service container names to the Kubernetes executor](https://gitlab.com/gitlab-org/gitlab/-/issues/421131)
&gt; 
&gt; #### Bug Fixes:
&gt; 
&gt; - [GitLab Runner is unable to retrieve cache from S3 Express One Zone](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/38484)
&gt; - [GitLab Runner on Kubernetes reports 'script_failure' instead of 'runner_system_failure' for AWS Spot instances](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/37911)
&gt; 
&gt; The list of all changes is in the GitLab Runner [CHANGELOG](https://gitlab.com/gitlab-org/gitlab-runner/blob/17-9-stable/CHANGELOG.md).

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/software_supply_chain_security/"&gt;Software supply chain security&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Rotate access tokens with `self_rotate` scope](https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html#personal-access-token-scopes): &lt;code&gt;System Access&lt;/code&gt;&lt;/summary&gt;

&gt; You can now use the `self_rotate` scope to rotate access tokens. This scope is available for personal, project, or group access tokens. Previously, this required two requests: One to obtain a new token, then another to perform the token rotation.
&gt; 
&gt; Thank you [Stéphane Talbot](https://gitlab.com/stalb) and [Anthony Juckel](https://gitlab.com/ajuckel) for your contribution! 

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[View inactive project and group access tokens](https://docs.gitlab.com/ee/user/project/settings/project_access_tokens.html#revoke-or-rotate-a-project-access-token) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;System Access&lt;/code&gt;&lt;/summary&gt;

&gt; You can now view inactive group and project access tokens in the UI. Previously, GitLab instantly deleted project and group access tokens after they expired or were revoked. This lack of a record of inactive tokens made auditing and security reviews more difficult. GitLab now retains inactive group and project access token records for 30 days, which helps teams track token usage and expiration for compliance and monitoring purposes.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[View access token IP addresses](https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html#view-the-time-at-and-ips-where-a-token-was-last-used): &lt;code&gt;System Access&lt;/code&gt;&lt;/summary&gt;

&gt; Previously, when viewing your personal access tokens, the only usage information you could see was how many minutes ago the token was used. Now, you can also see up to the last seven IP addresses that the tokens were used from. This combined information can help you track where your token is being used.
&gt; 
&gt; Thank you [Jayce Martin](https://jrm2k.us), [Avinash Koganti](http://www.linkedin.com/in/avinash-koganti-38b511162), [Austin Dixon](https://austindixon.net/), and [Rohit Kala](https://www.linkedin.com/in/rohit-kala-1b891a179) for your contribution! 

&lt;/details&gt;</content>
    <link href="https://gitlab.com/gitlab-org/gitlab-foss/-/releases/v17.9.0" rel="alternate"/>
  </entry>
</feed>
