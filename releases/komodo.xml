<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://selfh.st/apps</id>
  <title>Komodo Releases</title>
  <updated>2025-05-04T21:33:28.080988-04:00</updated>
  <author>
    <name>selfh.st</name>
    <email>contact@selfh.st</email>
  </author>
  <link href="https://selfh.st/apps" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <subtitle>Self-hosted software releases generated by selfh.st</subtitle>
  <entry>
    <id>https://github.com/moghtech/komodo/releases/tag/v1.17.1</id>
    <title>New release for Komodo: Komodo v1.17.1</title>
    <updated>2025-04-14T18:35:13-04:00</updated>
    <author>
      <name>moghtech/komodo</name>
    </author>
    <content>&lt;h1&gt;Changelog&lt;/h1&gt;
&lt;h2&gt;Breaking  ðŸš¨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;If using &lt;code&gt;PERIPHERY_ALLOWED_IPS&lt;/code&gt;, you may have to update the allowed IP to the IPv6 translation:
&lt;code&gt;12.34.56.70  -&amp;gt;  ::ffff:12.34.56.78&lt;/code&gt; (prefix the IP with &lt;code&gt;::ffff:&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;If its another issue, you can go back to previous bind behavior by setting &lt;code&gt;PERIPHERY_BIND_IP&lt;/code&gt; to &lt;code&gt;0.0.0.0&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;General&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;docker login&lt;/strong&gt; now wrap username in ticks (&lt;code&gt;'...'&lt;/code&gt;) by @huzky-v in #385&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IPv6 support&lt;/strong&gt; for both Core and Periphery by @vosdev in #405 &lt;/li&gt;
&lt;li&gt;By default, the servers will bind to &lt;code&gt;[::]&lt;/code&gt;, which allows connections over either IPv4 or IPv6&lt;/li&gt;
&lt;li&gt;Can customize the server bind ip using &lt;code&gt;KOMODO_BIND_IP&lt;/code&gt; / &lt;code&gt;PERIPHERY_BIND_IP&lt;/code&gt;, or by setting &lt;code&gt;bind_ip&lt;/code&gt; in the config toml.&lt;/li&gt;
&lt;li&gt;Support IPv6 allowed IPs&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Build&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Adds UI Defined / Files on Server option for Build, treating the Dockerfile the way the Stack treats compose file.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Can now &lt;strong&gt;view / edit the Dockerfile from Komodo&lt;/strong&gt;, and store it in TOML as well re #371 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Server&lt;/strong&gt;: Add &lt;code&gt;GetDockerContainersSummary&lt;/code&gt; endpoint by @alexshore in #386&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alerter&lt;/strong&gt;: Interpolate variables / secrets into Slack and Discord Alerter urls&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alerter&lt;/strong&gt;: Support Ntfy Alerter natively by @GFXSpeed in #404 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;UI&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Click the tags in the resources tables to toggle inclusion in the tag filter.&lt;/li&gt;
&lt;li&gt;Websocket now has 5 second retry timeout to avoid connection spam.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Client&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;JS client - package.json - add &lt;code&gt;"type": "module"&lt;/code&gt; to allow it to be more easily used with npm.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Docs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Improved standalone periphery setup docs by @theRAAPster in #402&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;Other Resources&lt;/code&gt; page, with community guides and custom alerter implementations: https://komo.do/docs/other-resources&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Screenshot 2025-04-14 at 2 58 46â€¯PM" src="https://github.com/user-attachments/assets/9a61fc49-8a16-42c7-9e51-19533e5d3f06" /&gt;&lt;/p&gt;</content>
    <link href="https://github.com/moghtech/komodo/releases/tag/v1.17.1" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/moghtech/komodo/releases/tag/v1.17.2</id>
    <title>New release for Komodo: Komodo v1.17.2</title>
    <updated>2025-04-19T02:56:25-04:00</updated>
    <author>
      <name>moghtech/komodo</name>
    </author>
    <content>&lt;h1&gt;Changelog&lt;/h1&gt;
&lt;h2&gt;General&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Simplify Periphery directory configuration using one single &lt;code&gt;PERIPHERY_ROOT_DIRECTORY&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The change is backward compatible, and your currently configured eg. PERIPHERY_STACK_DIR will still take precedent.&lt;/li&gt;
&lt;li&gt;Resource configuration changes will now show the full TOML diff of the changes made in the Update log&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Procedure / Action&lt;/strong&gt;: Implement &lt;strong&gt;Schedule&lt;/strong&gt; feature re #47&lt;/li&gt;
&lt;li&gt;Supports using English or CRON expression using &lt;a href="https://crates.io/crates/english-to-cron"&gt;english-to-cron&lt;/a&gt; and &lt;a href="https://docs.rs/croner/latest/croner/"&gt;croner&lt;/a&gt; libraries&lt;/li&gt;
&lt;li&gt;English Example: &lt;code&gt;Every Sunday at midnight&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Equivalent CRON: &lt;code&gt;0 0 0 ? * SUN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RunSchedule alert type&lt;/strong&gt; can be sent when the scheduled runs occur&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Also add &lt;strong&gt;ProcedureFailed&lt;/strong&gt; and &lt;strong&gt;ActionFailed&lt;/strong&gt; alert types for visibility on failures when running them on schedules.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Alerter&lt;/strong&gt;: Add &lt;code&gt;Pushover&lt;/code&gt; alerter by @alexshore in #421&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Screenshot 2025-04-18 at 11 22 13â€¯PM" src="https://github.com/user-attachments/assets/354af327-1d3a-4e56-8689-ff3e773e7d51" /&gt;&lt;/p&gt;</content>
    <link href="https://github.com/moghtech/komodo/releases/tag/v1.17.2" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/moghtech/komodo/releases/tag/v1.17.3</id>
    <title>New release for Komodo: Komodo v1.17.3</title>
    <updated>2025-04-24T22:33:19-04:00</updated>
    <author>
      <name>moghtech/komodo</name>
    </author>
    <content>&lt;h1&gt;Changelog&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Build&lt;/strong&gt;: Fixes a bug breaking &lt;code&gt;pre_build&lt;/code&gt; functionality, re #438 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thats it for this one, if you don't use this functionality, there is no other change.&lt;/p&gt;</content>
    <link href="https://github.com/moghtech/komodo/releases/tag/v1.17.3" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/moghtech/komodo/releases/tag/v1.17.4</id>
    <title>New release for Komodo: Komodo v1.17.4</title>
    <updated>2025-04-27T19:19:33-04:00</updated>
    <author>
      <name>moghtech/komodo</name>
    </author>
    <content>&lt;h1&gt;Changelog&lt;/h1&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;In app terminal access to your servers&lt;/strong&gt; re #142&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;docker exec&lt;/strong&gt; into containers re #75 &lt;/li&gt;
&lt;li&gt;IMPORTANT: Use &lt;code&gt;disable_terminals&lt;/code&gt; (&lt;code&gt;PERIPHERY_DISABLE_TERMINALS&lt;/code&gt;) in periphery config to &lt;strong&gt;disable this functionality&lt;/strong&gt; on particular servers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Details&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Server&lt;/strong&gt;: Adds the &lt;code&gt;Terminals&lt;/code&gt; tab, which allows you to connect to and manage &lt;strong&gt;multiple persistent shells&lt;/strong&gt; on the server.&lt;/li&gt;
&lt;li&gt;Uses &lt;a href="https://docs.rs/portable-pty/0.9.0/portable_pty/"&gt;portable-pty&lt;/a&gt; for the pseudoterminal on the backend and &lt;a href="https://xtermjs.org/"&gt;xterm.js&lt;/a&gt; for the frontend.&lt;/li&gt;
&lt;li&gt;Networked over websockets.&lt;/li&gt;
&lt;li&gt;Supports TUI applications like &lt;code&gt;htop&lt;/code&gt; / &lt;code&gt;ncdu&lt;/code&gt; / &lt;code&gt;nvim&lt;/code&gt; (and &lt;a href="https://crates.io/crates/runnables-cli/1.3.7"&gt;runnables-cli&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Each shell history / active running process is persisted on periphery after the client disconnects, making them suitable for long running tasks (you can run servers from them etc)&lt;/li&gt;
&lt;li&gt;The shell starts as the same linux user that &lt;code&gt;periphery&lt;/code&gt; runs as.&lt;ul&gt;
&lt;li&gt;For &lt;code&gt;systemctl --user&lt;/code&gt; installs, you login as &lt;strong&gt;your linux user&lt;/strong&gt; on the host (complete with any custom prompt).&lt;/li&gt;
&lt;li&gt;For &lt;strong&gt;root&lt;/strong&gt; systemctl installs, you would login as root linux user. You should consider creating a custom &lt;code&gt;periphery&lt;/code&gt; user with intented permissions, and updating your &lt;code&gt;periphery.service&lt;/code&gt; systemctl config to use this user instead: &lt;a href="https://bbs.archlinux.org/viewtopic.php?id=162297"&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For container Periphery, you connect to shell inside periphery container. The functionality will be more limited, but you can still communicate with docker socket in there (its mounted in), and &lt;code&gt;docker exec&lt;/code&gt; into containers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The terminals can have &lt;strong&gt;mutliple Komodo users connected at once&lt;/strong&gt;, and their view is synced.&lt;/li&gt;
&lt;li&gt;If Periphery is restarted, the Terminal sessions will be lost, as they are child processes of periphery.&lt;/li&gt;
&lt;li&gt;User must be admin or have &lt;code&gt;Write&lt;/code&gt; permission on Server to connect to terminals&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;disable_terminals&lt;/code&gt; (&lt;code&gt;PERIPHERY_DISABLE_TERMINALS&lt;/code&gt;) in periphery config to &lt;strong&gt;disable this functionality&lt;/strong&gt; on particular servers.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Easy access to &lt;strong&gt;&lt;code&gt;docker exec -it&lt;/code&gt;&lt;/strong&gt; (container shell access) from Container page, Terminal tab&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Deployment / Stack&lt;/strong&gt;: Adds the Terminal tab to Deployments and Stack services.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Configurable shell command inside container, eg &lt;code&gt;sh&lt;/code&gt; or &lt;code&gt;bash&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Screenshot 2025-04-26 at 12 20 42â€¯AM" src="https://github.com/user-attachments/assets/5fa56a3e-bf14-44dd-abb6-193cdcbf8b49" /&gt;
&lt;img alt="Screenshot 2025-04-27 at 3 59 41â€¯PM" src="https://github.com/user-attachments/assets/483e8dd5-0739-4fc3-b63a-aedd7f8e2299" /&gt;
&lt;img alt="Screenshot 2025-04-26 at 12 20 29â€¯AM" src="https://github.com/user-attachments/assets/8265c420-c829-4114-b2b1-9a784241f983" /&gt;&lt;/p&gt;</content>
    <link href="https://github.com/moghtech/komodo/releases/tag/v1.17.4" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/moghtech/komodo/releases/tag/v1.17.5</id>
    <title>New release for Komodo: Komodo v1.17.5</title>
    <updated>2025-05-04T18:17:06-04:00</updated>
    <author>
      <name>moghtech/komodo</name>
    </author>
    <content>&lt;h1&gt;Changelog&lt;/h1&gt;
&lt;p&gt;ðŸš¨ This release &lt;strong&gt;removes support for the ServerTemplate resource&lt;/strong&gt;. It was an interesting experiment, but ultimately I feel cloud server creation is outside of the scope of Komodo, it wasn't a very refined flow, and is better accomplished using other IAC tools such as OpenTofu.&lt;/p&gt;
&lt;p&gt;ðŸš¨ Container exec is now enabled even if &lt;code&gt;disable_terminals = true&lt;/code&gt;. This allows users to still use container exec while disabling general terminals. If you don't want to allow container exec, you now have to use &lt;code&gt;disable_container_exec&lt;/code&gt; in &lt;code&gt;periphery.config.toml&lt;/code&gt; (Env: &lt;code&gt;PERIPHERY_DISABLE_CONTAINER_EXEC=true&lt;/code&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Websocket&lt;/strong&gt;: Add &lt;code&gt;disable_websocket_reconnect = true&lt;/code&gt; to &lt;code&gt;core.config.toml&lt;/code&gt; (Env: &lt;code&gt;KOMODO_DISABLE_WEBSOCKET_RECONNECT=true&lt;/code&gt;) if your websocket is causing issues. You can still click the connected indicator in the topbar to manually trigger reconnect. The reconnect logic has also improved to make sure reconnect attempts only happen every 5s, so you might want to try it out before disabling reconnect. Re #368.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;UI&lt;/strong&gt;: Improve &lt;strong&gt;renaming&lt;/strong&gt; visibility / intuitiveness&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Now you rename by &lt;strong&gt;clicking on the name in the header&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Lots of people didn't see the previous rename function until it was pointed out, hopefully this makes it easier to figure out.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Server&lt;/strong&gt;: Terminals can now be started using your &lt;strong&gt;shell of choice&lt;/strong&gt; (before it was always &lt;code&gt;bash&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Server&lt;/strong&gt;: Implemented the &lt;code&gt;execute_terminal&lt;/code&gt; api to send command to your Terminals over HTTP call. See below for details.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stack&lt;/strong&gt;: Add the &lt;code&gt;BatchPullStack&lt;/code&gt; execution for use in Actions / Procedures.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Execute Terminal&lt;/h2&gt;
&lt;p&gt;One use case I had in mind for terminals is to have an easy way to handle a simple system update task, say running &lt;code&gt;sudo apt upgrade -y&lt;/code&gt;, on a schedule. To do this, I needed a way to interact with terminals from an Action. Now you can do this using &lt;code&gt;komodo.execute_terminal&lt;/code&gt;. For example, a simple Action to update all your servers and consolidate / save the logs:&lt;/p&gt;
&lt;p&gt;```ts
const servers = await komodo.read("ListServers", {
  query: { tags: ["auto-update"] },
});&lt;/p&gt;
&lt;p&gt;for (const server of servers) {
  console.log();
  console.log("------------------");
  console.log("Updating", server.name);
  await komodo.write("CreateTerminal", {
    server: server.name,
    name: "apt-upgrade",
    command: "bash",
    recreate: Types.TerminalRecreateMode.DifferentCommand,
  });
  await komodo.execute_terminal(
    {
      server: server.name,
      terminal: "apt-upgrade",
      command:
        "sudo apt update &amp;amp;&amp;amp; sudo apt upgrade -y &amp;amp;&amp;amp; sudo apt autoremove -y",
    },
    {
      onLine: console.log,
      onFinish: (code) =&amp;gt; console.log("Finished:", code),
    },
  );
}
```&lt;/p&gt;
&lt;p&gt;Note. It is necessary to &lt;code&gt;CreateTerminal&lt;/code&gt; before you can execute on it, as shown above. Setting &lt;code&gt;recreate: Types.TerminalRecreateMode.DifferentCommand&lt;/code&gt; will make it so it does not fail if the terminal already exists, and only recreates the terminal if it was started with a different root command. This allows you to reuse the same terminal and collect the output for later viewing. You can also use &lt;code&gt;Types.TerminalRecreateMode.Always&lt;/code&gt; to always run on a fresh terminal.&lt;/p&gt;
&lt;h2&gt;Other&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The API now supports the &lt;strong&gt;Path&lt;/strong&gt; calling convention, allowing for the request &lt;strong&gt;&lt;code&gt;type&lt;/code&gt;&lt;/strong&gt; to be specified in the &lt;strong&gt;URL path&lt;/strong&gt;, which is a bit more concise. For example calling &lt;a href="https://docs.rs/komodo_client/latest/komodo_client/api/execute/struct.DeployStack.html"&gt;DeployStack&lt;/a&gt;:
```&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Path calling convention (New)&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;curl --header (unchanged) \
    --data '{ "stack": "my-stack", "services": ["server"] }' \ # &amp;lt;- data just matches the rust struct
    https://komodo.example.com/execute/DeployStack # &amp;lt;- request type in path&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Type-params calling convention (Old, but still supported)&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;curl --header (unchanged) \
    --data '{ "type": "DeployStack", "params": { "stack": "my-stack", "services": ["server"] } }' \
    https://komodo.example.com/execute
```
- This is not breaking, the previous way of calling the API continues to be supported.
- The Frontend interface now uses the path based calling convention, as it is much easier to see what calls are happening from the browser devtools during development. That was the main motivation for this feature.
- There isn't any change to the &lt;a href="https://crates.io/crates/komodo_client"&gt;rust&lt;/a&gt; or &lt;a href="https://www.npmjs.com/package/komodo_client"&gt;typescript&lt;/a&gt; clients.&lt;/p&gt;</content>
    <link href="https://github.com/moghtech/komodo/releases/tag/v1.17.5" rel="alternate"/>
  </entry>
</feed>
